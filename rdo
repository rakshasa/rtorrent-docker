#!/usr/bin/env bash
#
# Docker test environment for rTorrent
#
# https://github.com/rakshasa/rtorrent-docker

set -e

cd "$(dirname "${BASH_SOURCE[0]}")"

# Deprecated:
PROJECT_PATH="."
DATA_PATH="./data"

source "./functions/common/init"

include_source=(
  common/args
  common/utils

  common.init
  common.container
  common.image
  common.system

  # Preload any headers for commands that are likely to be executed
  # multiple times.
  build
  docker
  docker.clean
  docker.context
  init
  network
  run
  stage
  torrent
  torrent.wait
)

for src in "${include_source[@]}"; do
  is_header_included "${src}" || source "./functions/${src}"
done

rdo() {
  # eval "$(args::init_subcommand "rdo" "RTorrent docker test environment")"

  # args::new_option "debug" empty "d" "Output additional debug information" \
  #                  'set -x'

  # args::new_command "bash" default "Start custom bash session" \
  #                   'is_header_included machine || source "./functions/machine"; rdo_bash "${@}"'
  # args::new_command "batch" default "Run batch file" \
  #                   'rdo_batch "${@}"'
  # args::new_command "build" default "Build projects" \
  #                   'rdo_build "${@}"'
  # args::new_command "docker" default "Manage docker" \
  #                   'rdo_docker "${@}"'
  # args::new_command "env" default "." \
  #                   'is_header_included env || source "./functions/env"; rdo_env "${@}"'
  # args::new_command "git" default "." \
  #                   'is_header_included git || source "./functions/git"; do_git "${@}"'
  # args::new_command "init" default "Initalize the environment" \
  #                   'rdo_init "${@}"'
  # args::new_command "machine" default "Manage docker machines" \
  #                   'is_header_included machine || source "./functions/machine"; rdo_machine "${@}"'
  # args::new_command "network" default "Manage networks" \
  #                   'rdo_network "${@}"'
  # args::new_command "stage" default "Stage environments" \
  #                   'rdo_stage "${@}"'
  # args::new_command "torrent" default "Manage torrents" \
  #                   'rdo_torrent "${@}"'
  # args::new_command "watch" empty "Watch docker images" \
  #                   'rdo_watch "${@}"'

  # eval "$(args::process)"

  while true; do
    case "${1}" in
      --debug|-d)
        shift
        set -x
        ;;
      --help|-h|'')
        echo "Usage: rdo COMMAND"
        echo
        echo "RTorrent docker test environment"
        echo
        echo "Options:"
        echo "  -d, --debug   Output additional debug information"
        echo
        echo "Commands:"
        echo "  bash          Start custom bash session"
        echo "  batch         Run batch file"
        echo "  build         Build projects"
        echo "  docker        Manage docker"
        echo "  env           ."
        echo "  git           ."
        echo "  init          Initalize the environment"
        echo "  machine       Manage docker machines"
        echo "  network       Manage networks"
        echo "  node          Manage nodes"
        echo "  stage         Stage environments"
        echo "  torrent       Manage torrents"
        echo "  watch         Watch docker images"
        echo
        echo "Run 'rdo COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  local args__root="rdo"
  local args__cmd="${1}"
  shift || :

  case "${args__cmd}" in
    bash)
      is_header_included machine || source "./functions/machine"; rdo_bash "${@}"
      ;;
    batch)
      rdo_batch "${@}"
      ;;
    build)
      rdo_build "${@}"
      ;;
    docker)
      rdo_docker "${@}"
      ;;
    env)
      is_header_included env || source "./functions/env"; rdo_env "${@}"
      ;;
    git)
      is_header_included git || source "./functions/git"; rdo_git "${@}"
      ;;
    init)
      rdo_init "${@}"
      ;;
    machine)
      is_header_included machine || source "./functions/machine"; rdo_machine "${@}"
      ;;
    network)
      rdo_network "${@}"
      ;;
    node)
      rdo_node "${@}"
      ;;
    stage)
      rdo_stage "${@}"
      ;;
    torrent)
      rdo_torrent "${@}"
      ;;
    watch)
      args::verify_command_empty "${@}"
      rdo_watch "${@}"
      ;;
    *)
      print_error "rdo: unknown command: ${args__cmd}"
      exit 1
      ;;
  esac
}

rdo_test_begin() {
  rdo_test__name="$(basename "${BASH_SOURCE[1]}")"
  rdo_test__name="${rdo_test__name//-/ }"

  print_progress "staging ${rdo_test__name} tests"

  rdo_stage_init
}

rdo_test_end() {
  print_progress "completed ${rdo_test__name} tests"
}

rdo_batch() {
  # eval "$(args::init_options_string "rdo batch FILENAME" "filename" "Run batch file")"

  # eval "$(args::process)"

  # start of generated bash args 'rdo batch FILENAME'

  while true; do
    case "${1}" in
      --help|-h)
        echo "Usage: rdo batch FILENAME"
        echo
        echo "Run batch file"
        echo
        echo "Run 'rdo batch FILENAME COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  if (( ${#} > 1 )); then
    print_error "rdo batch FILENAME: too many arguments"
    exit 1
  fi

  if (( ${#} == 0 )) || [[ -z "${1}" ]]; then
    print_error "rdo batch FILENAME: missing or empty argument"
    exit 1
  fi

  local filename="${1}"
  shift

  # end of generated bash args 'rdo batch FILENAME'

  source "${filename}"
}

rdo_watch() {
  watch -n5 'docker images --filter "label=ancestor_project_root=rdo" | pr -t -2 -o 4 -w 260'
}

prune_containers() {
  docker container prune --force --filter 'ancestor=rtorrent.ancestor'
}

prune_images() {
  if [[ -n "$(docker images -q --filter 'ancestor=rtorrent.ancestor' --filter 'dangling=true')" ]]; then
    docker rmi --force $(docker images -q --filter 'since=rtorrent.ancestor' --filter 'dangling=true')
  else
    print_progress "no dangling images"
  fi
}

rdo "${@}"
