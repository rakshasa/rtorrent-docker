#!/usr/bin/env bash
#
# Docker test environment for rTorrent
#
# https://github.com/rakshasa/rtorrent-docker

set -e

COLOR_NC='\033[0m'
COLOR_RED='\033[0;31m'
COLOR_GREEN='\033[0;32m'

PROJECT_PATH="${BASH_SOURCE[0]%/*}"
PROJECT_ABSOLUTE_PATH=
DATA_PATH="${PROJECT_PATH}/data"

source "${PROJECT_PATH}/functions/common/init"
is_header_included common/args || source "${PROJECT_PATH}/functions/common/args"
is_header_included common/utils || source "${PROJECT_PATH}/functions/common/utils"

is_header_included common.init || source "${PROJECT_PATH}/functions/common.init"
is_header_included common.container || source "${PROJECT_PATH}/functions/common.container"
is_header_included common.help || source "${PROJECT_PATH}/functions/common.help"
is_header_included common.image || source "${PROJECT_PATH}/functions/common.image"
is_header_included common.system || source "${PROJECT_PATH}/functions/common.system"

# Preload any headers for commands that are likely to be executed
# multiple times.
is_header_included build || source "${PROJECT_PATH}/functions/build"
is_header_included docker || source "${PROJECT_PATH}/functions/docker"
is_header_included docker.clean || source "${PROJECT_PATH}/functions/docker.clean"
is_header_included docker.context || source "${PROJECT_PATH}/functions/docker.context"
is_header_included docker.network || source "${PROJECT_PATH}/functions/docker.network"
is_header_included run || source "${PROJECT_PATH}/functions/run"
is_header_included stage || source "${PROJECT_PATH}/functions/stage"

rdo() {
  # eval "$(args::init_subcommand "rdo" "Build project")"

  # args::new_option "debug" empty "d" "Create and manage rtorrent-docker environment" \
  #                  'set -x'

  # args::new_command "bash" default "Start custom bash session" \
  #                   'is_header_included machine || source "${PROJECT_PATH}/functions/machine"; rdo_bash "${@}"'
  # args::new_command "build" default "Build projects" \
  #                   'rdo_build "${@}"'
  # args::new_command "docker" default "Manage docker" \
  #                   'rdo_docker "${@}"'
  # args::new_command "env" default "." \
  #                   'is_header_included env || source "${PROJECT_PATH}/functions/env"; rdo_env "${@}"'
  # args::new_command "git" default "." \
  #                   'is_header_included git || source "${PROJECT_PATH}/functions/git"; do_git "${@}"'
  # args::new_command "init" default "Initalize the environment and optional docker machine" \
  #                   'is_header_included init || source "${PROJECT_PATH}/functions/init"; rdo_init "${@}"'
  # args::new_command "machine" default "Manage docker machines" \
  #                   'is_header_included machine || source "${PROJECT_PATH}/functions/machine"; rdo_machine "${@}"'
  # args::new_command "stage" default "." \
  #                   'rdo_stage "${@}"'

  # eval "$(args::process_subcommand)"

  #   run)
  #     rdo_run "${@}"
  #     ;;
  #   tags)
  #     source "${PROJECT_PATH}/functions/tags"
  #     rdo_tags "${@}"
  #     ;;

  #   watch)
  #     watch -n5 '
  #       printf "rdo/build/stage:default layers: "
  #       docker inspect --format "{{ \$length := len .RootFS.Layers }}{{ \$length }}" rdo/build/stage:default
  #       echo
  #       docker images |pr -t -2 -o 4 -w 260'
  #     ;;
  #   destroy)
  #     source "${PROJECT_PATH}/functions/machine"
  #     rdo_machine_destroy
  #     [[ -f "${DATA_PATH}/"env.* ]] && rm "${DATA_PATH}/"env.*
  #     ;;
  #   prune)
  #     prune_containers
  #     prune_images
  #     ;;
  #   prune-containers)
  #     prune_containers
  #     ;;
  #   prune-images)
  #     prune_images
  #     ;;
  #   clone)
  #     (
  #       cd "${DATA_PATH}"
  #       git clone git@github.com:rakshasa/libtorrent.git
  #       git clone git@github.com:rakshasa/rtorrent.git
  #     )
  #     ;;
  #   run-build)
  #     rdo_machine__verify
  #     main "build"
  #     "${EXEC_PTY}" docker run --rm -it \
  #                   --name "rtorrent.current" \
  #                   rtorrent.build.compile
  #     ;;
  #   exec-build)
  #     "${EXEC_PTY}" docker exec -it dreamy_gauss bash
  #     ;;
  #   *)
  #     print_error "unknown command: ${@}"
  #     return 1
  #     ;;
  # esac

  while true; do
    case "${1}" in
      --debug)
        shift
        set -x
        ;;
      --help|-h|'')
        echo
        echo "Usage: rdo COMMAND"
        echo
        echo "Build project"
        echo
        echo "Options:"
        echo "  -d, --debug   Create and manage rtorrent-docker environment"
        echo
        echo "Commands:"
        echo "  bash          Start custom bash session"
        echo "  build         Build projects"
        echo "  docker        Manage docker"
        echo "  env           ."
        echo "  git           ."
        echo "  init          Initalize the environment and optional docker machine"
        echo "  machine       Manage docker machines"
        echo "  stage         ."
        echo
        echo "Run 'rdo COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  local args__cmd="${1}"
  shift || :

  case "${args__cmd}" in
    bash)
        is_header_included machine || source "${PROJECT_PATH}/functions/machine"; rdo_bash "${@}"
      ;;
    build)
        rdo_build "${@}"
      ;;
    docker)
        rdo_docker "${@}"
      ;;
    env)
        is_header_included env || source "${PROJECT_PATH}/functions/env"; rdo_env "${@}"
      ;;
    git)
        is_header_included git || source "${PROJECT_PATH}/functions/git"; do_git "${@}"
      ;;
    init)
        is_header_included init || source "${PROJECT_PATH}/functions/init"; rdo_init "${@}"
      ;;
    machine)
        is_header_included machine || source "${PROJECT_PATH}/functions/machine"; rdo_machine "${@}"
      ;;
    stage)
        rdo_stage "${@}"
      ;;
    __print_self)
      args::process_subcommand
      return
      ;;
    *)
      print_error "rdo: unknown command: ${args__cmd}"
      exit 1
      ;;
  esac
}

prune_containers() {
  docker container prune --force --filter 'ancestor=rtorrent.ancestor'
}

prune_images() {
  if [[ -n "$(docker images -q --filter 'ancestor=rtorrent.ancestor' --filter 'dangling=true')" ]]; then
    docker rmi --force $(docker images -q --filter 'since=rtorrent.ancestor' --filter 'dangling=true')
  else
    print_progress "no dangling images"
  fi
}

rdo "${@}"
