#!/usr/bin/env bash
#
# Docker test environment for rTorrent
#
# https://github.com/rakshasa/rtorrent-docker

set -e

cd "$(dirname "${BASH_SOURCE[0]}")"

PROJECT_PATH="."
DATA_PATH="./data"

source "./functions/common/init"
is_header_included common/args || source "./functions/common/args"
is_header_included common/utils || source "./functions/common/utils"

is_header_included common.init || source "./functions/common.init"
is_header_included common.container || source "./functions/common.container"
is_header_included common.image || source "./functions/common.image"
is_header_included common.system || source "./functions/common.system"

# Preload any headers for commands that are likely to be executed
# multiple times.
is_header_included build || source "./functions/build"
is_header_included docker || source "./functions/docker"
is_header_included docker.clean || source "./functions/docker.clean"
is_header_included docker.context || source "./functions/docker.context"
is_header_included network || source "./functions/network"
is_header_included node || source "./functions/node"
is_header_included run || source "./functions/run"
is_header_included stage || source "./functions/stage"

rdo() {
  eval "$(args::init_subcommand "rdo" "RTorrent docker test environment")"

  args::new_option "debug" empty "d" "Output additional debug information" \
                   'set -x'

  args::new_command "bash" default "Start custom bash session" \
                    'is_header_included machine || source "./functions/machine"; rdo_bash "${@}"'
  args::new_command "build" default "Build projects" \
                    'rdo_build "${@}"'
  args::new_command "docker" default "Manage docker" \
                    'rdo_docker "${@}"'
  args::new_command "env" default "." \
                    'is_header_included env || source "./functions/env"; rdo_env "${@}"'
  args::new_command "git" default "." \
                    'is_header_included git || source "./functions/git"; do_git "${@}"'
  args::new_command "init" default "Initalize the environment" \
                    'is_header_included init || source "./functions/init"; rdo_init "${@}"'
  args::new_command "machine" default "Manage docker machines" \
                    'is_header_included machine || source "./functions/machine"; rdo_machine "${@}"'
  args::new_command "network" default "Manage networks" \
                    'rdo_network "${@}"'
  args::new_command "node" default "Manage nodes" \
                    'rdo_node "${@}"'
  args::new_command "stage" default "Stage environments" \
                    'rdo_stage "${@}"'
  args::new_command "watch" empty "Watch docker images" \
                    'rdo_watch "${@}"'

  eval "$(args::process)"
}

rdo_watch() {
  watch -n5 '
    printf "rdo/build/stage:default layers: "
    docker inspect --format "{{ \$length := len .RootFS.Layers }}{{ \$length }}" rdo/build/stage:default
    echo
    docker images | pr -t -2 -o 4 -w 260'
}

prune_containers() {
  docker container prune --force --filter 'ancestor=rtorrent.ancestor'
}

prune_images() {
  if [[ -n "$(docker images -q --filter 'ancestor=rtorrent.ancestor' --filter 'dangling=true')" ]]; then
    docker rmi --force $(docker images -q --filter 'since=rtorrent.ancestor' --filter 'dangling=true')
  else
    print_progress "no dangling images"
  fi
}

rdo "${@}"
