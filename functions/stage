#!/usr/bin/env bash

include_header stage

rdo_stage() {
  local project_path
  project_path="$(get_project_path)"

  eval "$(args::init_subcommand "rdo stage" "Manage staging of environments.")"

  args::new_command "init" empty "Initialize new environment for staging" \
                    'rdo_stage_init'
  args::new_command "deploy" empty "Deploy environment" \
                    'rdo_stage_deploy'
  args::new_command "clean" empty "Remove environment" \
                    'rdo_stage_clean'

  args::new_command "append-rc" default "Append to node's rc file" \
                    'rdo_stage_append_rc "${@}"'

  args::new_command "network" default "Add network" \
                    'rdo_stage_network "${@}"'
  args::new_command "router" default "Add router" \
                    'rdo_stage_router "${@}"'

  args::new_command "dns" default "Add dns" \
                    'rdo_stage_dns "${@}"'
  args::new_command "rtorrent" default "Add node" \
                    'rdo_stage_rtorrent "${@}"'
  args::new_command "tracker" default "Add tracker" \
                    'rdo_stage_tracker "${@}"'

  eval "$(args::process)"
}

rdo_stage_init() {
  # TODO: Add state, don't allow calls when not in initialize.
  rdo_stage_clean
  mkdir -p "./run/current/"{networks,nodes}
  print_progress "stage initialized"
}

rdo_stage_deploy() {
  print_progress "stage deploying"

  local deploy_type
  for deploy_type in dns trackers clients; do
    local node_list=()
    mapfile -t node_list < <(ls "./run/current/${deploy_type}/" 2> /dev/null || :)

    local node
    for node in "${node_list[@]}"; do
      if [[ "$(cat "./run/current/nodes/${node}/signal")" == "stage" ]]; then
        echo "deploy" > "./run/current/nodes/${node}/signal"
        echo "${deploy_type}/${node}"
      fi
    done
  done

  print_progress "stage deployed"
}

rdo_stage_clean() {
  local container_ids
  container_ids="$(docker container ls -qa --filter "label=project=rdo")"

  if [[ -n "${container_ids}" ]]; then
    docker container rm --force ${container_ids} > /dev/null
  fi

  rdo_network_iptables_flush > /dev/null
  rdo_network_clean > /dev/null

  rm -rf ./run/current &> /dev/null
  rm -rf ./run/torrents/* &> /dev/null
  print_progress "stage cleaned"
}

rdo_stage_append_rc() {
  # eval "$(args::init_options_string "rdo stage append-rc APPEND-TEXT" "append_text" "Append to node's rc file")"

  # args::new_option "node" string "" "Name of the node" \
  #                  'local node_list=()' 'node_list+=("${args__1}")'

  # eval "$(args::process)"

  # start of generated bash args 'rdo stage append-rc APPEND-TEXT'

  local node_list=()

  while true; do
    case "${1}" in
      --node)
        local args__1="${2:?Missing argument for '${1}'.}"
        shift 2
        node_list+=("${args__1}")
        ;;
      --help|-h)
        echo "Usage: rdo stage append-rc APPEND-TEXT"
        echo
        echo "Append to node's rc file"
        echo
        echo "Options:"
        echo "      --node   Name of the node"
        echo
        echo "Run 'rdo stage append-rc APPEND-TEXT COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  if (( ${#} > 1 )); then
    print_error "rdo stage append-rc APPEND-TEXT: too many arguments"
    exit 1
  fi

  if (( ${#} == 0 )) || [[ -z "${1}" ]]; then
    print_error "rdo stage append-rc APPEND-TEXT: missing or empty argument"
    exit 1
  fi

  local append_text="${1}"
  shift

  # end of generated bash args 'rdo stage append-rc APPEND-TEXT'

  local node
  for node in "${node_list[@]}"; do
    if [[ "$(cat "./run/current/nodes/${node}/signal")" == "staging" ]]; then
      print_error "stage_append_rc called on a node not staging: ${node}"
      exit 1
    fi

    printf "append to node ${node}:\n${append_text}\n"
    printf "\n${append_text}\n" >> "./run/current/nodes/${node}/rc"
  done
}

rdo_stage_network() {
  # eval "$(args::init_options_string "rdo stage network NAME" "name" "Stage a network")"

  # eval "$(args::process)"

  while true; do
    case "${1}" in
      --help|-h)
        echo "Usage: rdo stage network NAME COMMAND"
        echo
        echo "Stage a network"
        echo
        echo "Run 'rdo stage network NAME COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  if (( ${#} > 1 )); then
    print_error "rdo stage network NAME: too many arguments"
    exit 1
  fi

  if (( ${#} == 0 )) || [[ -z "${1}" ]]; then
    print_error "rdo stage network NAME: missing or empty argument"
    exit 1
  fi

  local name="${1}"
  shift

  local self_path="./run/current/networks/${name}"
  mkdir -p "${self_path}"

  local args=(
    --label "project=rdo"

    --opt "com.docker.network.bridge.enable_ip_masquerade=false"
  )

  docker network create "${args[@]}" "${name}" > /dev/null

  rdo_network_isolate_network "${name}"

  echo "$(rdo_network subnet "${name}")" > "${self_path}/subnet"
  echo "$(rdo_network address "${name}")" > "${self_path}/address"
  echo "$(rdo_network prefix "${name}")" > "${self_path}/prefix"

  local current_networks=($(shopt -s nullglob && cd ./run/current/networks/ && echo *))
  echo "${#current_networks[@]}" > "${self_path}/index"

  echo "networks/${name}"
}

rdo_stage_router() {
  local create_args=()
  local run_template="empty"

  eval "$(args::init_options_string "rdo stage router NODE-NAME" "node_name" "Add router to staging of environments.")"

  rdo_stage__container__default_args

  eval "$(args::process)"

  local self_type="router"
  local image_name="rdo/run/router:global"

  create_args+=(
    --mount "type=bind,src=/var/run/docker.sock,dst=/docker.sock"
  )

  rdo_stage__container__create
  rdo_stage__container__start
  rdo_stage__container__wait_started
  rdo_stage__container__update_run

  echo "${self_type}/${node_name}"
}

rdo_stage_dns() {
  local create_args=()

  # eval "$(args::init_options_string "rdo stage dns NODE-NAME" "node_name" "Add dns to staging of environments.")"

  # rdo_stage__container__default_args

  # eval "$(args::process)"

  # start of generated bash args 'rdo stage dns NODE-NAME'

  local resolve_conf
  local networks=()
  local run_template

  while true; do
    case "${1}" in
      --dns-inet)
        local args__1="${2%%:*}"
        local args__2="${2##*:}"
        local args__1="${args__1:?Missing argument for '${1}'.}"
        local args__2="${args__2:?Missing argument for '${1}'.}"

        if [[ "${args__1}:${args__2}" != "${2}" ]]; then
          print_error "${args__root}: invalid option format: ${1} ${2}"
          return 1
        fi

        shift 2
        resolve_conf="nameserver $(cat ./run/current/dns/${args__1}/interfaces/${args__2}/inet)"
        ;;
      --network|-n)
        local args__1="${2:?Missing argument for '${1}'.}"
        shift 2
        networks+=("${args__1}")
        ;;
      --run-template|-r)
        local args__1="${2:?Missing argument for '${1}'.}"
        shift 2
        run_template=("${args__1}")
        ;;
      --help|-h)
        echo "Usage: rdo stage dns NODE-NAME"
        echo
        echo "Add dns to staging of environments."
        echo
        echo "Options:"
        echo "      --dns-inet       Set dns resolver to a 'dns_node:network'"
        echo "  -n, --network        Connect tracker to network"
        echo "  -r, --run-template   Use template to create run script"
        echo
        echo "Run 'rdo stage dns NODE-NAME COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  if (( ${#} > 1 )); then
    print_error "rdo stage dns NODE-NAME: too many arguments"
    exit 1
  fi

  if (( ${#} == 0 )) || [[ -z "${1}" ]]; then
    print_error "rdo stage dns NODE-NAME: missing or empty argument"
    exit 1
  fi

  local node_name="${1}"
  shift

  # end of generated bash args 'rdo stage dns NODE-NAME'

  local self_type="dns"
  local image_name="rdo/run/dns:global"

  create_args+=(
    --mount "type=bind,src=/var/run/docker.sock,dst=/docker.sock"
  )

  rdo_stage__container__create
  rdo_stage__container__start
  rdo_stage__container__wait_started
  rdo_stage__container__update_run

  echo "${self_type}/${node_name}"
}

rdo_stage_rtorrent() {
  local default_create_args=()

  # eval "$(args::init_options_default "rdo stage rtorrent [NODE-NAME]..." "Stage rtorrent clients.")"

  # rdo_stage__container__default_args

  # args::new_option "torrents-disksize" string "" "Torrents volume disksize" \
  #                  'local torrents_disksize' 'torrents_disksize="${args__1}"'

  # eval "$(args::process)"

  # start of generated bash args 'rdo stage rtorrent [NODE-NAME]...'

  local resolve_conf
  local networks=()
  local run_template
  local torrents_disksize

  while true; do
    case "${1}" in
      --dns-inet)
        local args__1="${2%%:*}"
        local args__2="${2##*:}"
        local args__1="${args__1:?Missing argument for '${1}'.}"
        local args__2="${args__2:?Missing argument for '${1}'.}"

        if [[ "${args__1}:${args__2}" != "${2}" ]]; then
          print_error "${args__root}: invalid option format: ${1} ${2}"
          return 1
        fi

        shift 2
        resolve_conf="nameserver $(cat ./run/current/dns/${args__1}/interfaces/${args__2}/inet)"
        ;;
      --network|-n)
        local args__1="${2:?Missing argument for '${1}'.}"
        shift 2
        networks+=("${args__1}")
        ;;
      --run-template|-r)
        local args__1="${2:?Missing argument for '${1}'.}"
        shift 2
        run_template=("${args__1}")
        ;;
      --torrents-disksize)
        local args__1="${2:?Missing argument for '${1}'.}"
        shift 2
        torrents_disksize="${args__1}"
        ;;
      --help|-h)
        echo "Usage: rdo stage rtorrent [NODE-NAME]..."
        echo
        echo "Stage rtorrent clients."
        echo
        echo "Options:"
        echo "      --dns-inet            Set dns resolver to a 'dns_node:network'"
        echo "  -n, --network             Connect tracker to network"
        echo "  -r, --run-template        Use template to create run script"
        echo "      --torrents-disksize   Torrents volume disksize"
        echo
        echo "Run 'rdo stage rtorrent [NODE-NAME]... COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  # end of generated bash args 'rdo stage rtorrent [NODE-NAME]...'

  local self_type="clients"
  local image_name="rdo/run/rtorrent:default"

  if [[ -n "${torrents_disksize}" ]]; then
    default_create_args+=(--mount "type=tmpfs,dst=/torrents,tmpfs-size=${torrents_disksize}")
  else
    default_create_args+=(--mount "type=tmpfs,dst=/torrents")
  fi

  default_create_args+=(
    --privileged
    --cap-add "SYS_PTRACE"
    --security-opt "seccomp=unconfined"
    --security-opt "apparmor=unconfined"
  )

  local node_name
  for node_name in "${@}"; do
    local create_args=("${default_create_args[@]}")

    mkdir -p "./run/current/nodes/${node_name}/"{logs,session,torrents,watch}

    rdo_stage__container__create
    rdo_stage__container__start
    rdo_stage__container__wait_started
    rdo_stage__container__update_run

    echo "${self_type}/${node_name}"
  done
}

rdo_stage_tracker() {
  local create_args=()

  # eval "$(args::init_options_string "rdo stage tracker NODE-NAME" "node_name" "Add tracker to staging of environments.")"

  # rdo_stage__container__default_args

  # eval "$(args::process)"

  # start of generated bash args 'rdo stage tracker NODE-NAME'

  local resolve_conf
  local networks=()
  local run_template

  while true; do
    case "${1}" in
      --dns-inet)
        local args__1="${2%%:*}"
        local args__2="${2##*:}"
        local args__1="${args__1:?Missing argument for '${1}'.}"
        local args__2="${args__2:?Missing argument for '${1}'.}"

        if [[ "${args__1}:${args__2}" != "${2}" ]]; then
          print_error "${args__root}: invalid option format: ${1} ${2}"
          return 1
        fi

        shift 2
        resolve_conf="nameserver $(cat ./run/current/dns/${args__1}/interfaces/${args__2}/inet)"
        ;;
      --network|-n)
        local args__1="${2:?Missing argument for '${1}'.}"
        shift 2
        networks+=("${args__1}")
        ;;
      --run-template|-r)
        local args__1="${2:?Missing argument for '${1}'.}"
        shift 2
        run_template=("${args__1}")
        ;;
      --help|-h)
        echo "Usage: rdo stage tracker NODE-NAME"
        echo
        echo "Add tracker to staging of environments."
        echo
        echo "Options:"
        echo "      --dns-inet       Set dns resolver to a 'dns_node:network'"
        echo "  -n, --network        Connect tracker to network"
        echo "  -r, --run-template   Use template to create run script"
        echo
        echo "Run 'rdo stage tracker NODE-NAME COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  if (( ${#} > 1 )); then
    print_error "rdo stage tracker NODE-NAME: too many arguments"
    exit 1
  fi

  if (( ${#} == 0 )) || [[ -z "${1}" ]]; then
    print_error "rdo stage tracker NODE-NAME: missing or empty argument"
    exit 1
  fi

  local node_name="${1}"
  shift

  # end of generated bash args 'rdo stage tracker NODE-NAME'

  local self_type="trackers"
  local image_name="rdo/run/opentracker:global"

  create_args+=(
    # --publish 6969:6969/udp
    # --publish 6969:6969
  )

  rdo_stage__container__create
  rdo_stage__container__start
  rdo_stage__container__wait_started
  rdo_stage__container__update_run

  echo "${self_type}/${node_name}"
}

# Helper functions

rdo_stage__container__default_args() {
  args::new_option "dns-inet" string2: "" "Set dns resolver to a 'dns_node:network'" \
                   'local resolve_conf' 'resolve_conf="nameserver $(cat ./run/current/dns/${args__1}/interfaces/${args__2}/inet)"'
  args::new_option "network" string "n" "Connect tracker to network" \
                   'local networks=()' 'networks+=("${args__1}")'
  args::new_option "run-template" string "r" "Use template to create run script" \
                   'local run_template' 'run_template=("${args__1}")'
}

rdo_stage__container__create() {
  local self_path="./run/current/nodes/${node_name}"

  : "${run_template:?Missing run template argument.}"

  mkdir -p "./run/current/${self_type}" "${self_path}/interfaces"
  ln -s "./../nodes/${node_name}" "./run/current/${self_type}/${node_name}"

  echo "stage" > "${self_path}/signal"
  echo "starting" > "${self_path}/state"

  "./templates/run/${run_template}" > "${self_path}/run"
  chmod a+x "${self_path}/run"

  if [[ -f "./templates/rc/${run_template}" ]]; then
    "./templates/rc/${run_template}" > "${self_path}/rc"
  fi

  if [[ -n "${resolve_conf}" ]]; then
    echo "${resolve_conf}" > "${self_path}/resolv.conf"
  fi

  : "${RDO_RUN_PATH:?Missing environment variable.}"

  create_args+=(
    --name "${node_name}"
    --tty
    --network "none"
    --mount "type=bind,source=${RDO_RUN_PATH}/current/nodes/${node_name}/,target=/run/self/"
  )

  docker container create --label "project=rdo" "${create_args[@]}" "${image_name}" > /dev/null
}

rdo_stage__container__start() {
  docker network disconnect "none" "${node_name}"

  for network in "${networks[@]}"; do
    docker network connect "${network}" "${node_name}"
  done

  docker start "${node_name}" > /dev/null
}

rdo_stage__container__wait_started() {
  while [[ "$(docker container inspect --format '{{ .State.Status }}' "${node_name}")" == "created" ]]; do
    sleep 0.01
  done

  while
    [[ "$(docker container inspect --format '{{ .State.Status }}' "${node_name}")" == "running" ]] &&
    [[ "$(cat ./run/current/nodes/${node_name}/state)" == "starting" ]]; do
    sleep 0.01
  done
}

rdo_stage__container__update_run() {
  local self_path="./run/current/nodes/${node_name}"

  rm -rf "${self_path}/"{interfaces,net}
  mkdir "${self_path}/"{interfaces,net}

  local sandbox_key
  sandbox_key="$(docker inspect --format='{{.NetworkSettings.SandboxKey}}' "${node_name}")"

  local node_networks_output
  node_networks_output="$(
    docker inspect --format '
      {{- range $key, $value := .NetworkSettings.Networks }}
      {{- printf "network:%s mac:%s inet:%s inet6:%s\n" $key $value.MacAddress $value.IPAddress $value.GlobalIPv6Address }}
      {{- end -}}
    ' "${node_name}")"

  local node_networks
  mapfile -t node_networks < <(echo "${node_networks_output}")

  local eth_index=$(( 0 ))

  local node_network_line
  for node_network_line in "${node_networks[@]}"; do
    if ! [[ "${node_network_line}" =~ ^network:([^ ]*)\ mac:([^ ]*)\ inet:([^ ]*)\ inet6:([^ ]*)$ ]]; then
      print_error "invalid input node networks: ${node_network_line}"
      continue
    fi

    local network="${BASH_REMATCH[1]:?Missing network name.}"
    mkdir "${self_path}/interfaces/${network}"

    [[ -z "${BASH_REMATCH[2]}" ]] || echo "${BASH_REMATCH[2]}" > "${self_path}/interfaces/${network}/mac"
    [[ -z "${BASH_REMATCH[3]}" ]] || echo "${BASH_REMATCH[3]}" > "${self_path}/interfaces/${network}/inet"
    [[ -z "${BASH_REMATCH[4]}" ]] || echo "${BASH_REMATCH[4]}" > "${self_path}/interfaces/${network}/inet6"

    while true; do
      if [[ "$(docker container inspect --format '{{ .State.Status }}' "${node_name}")" != "running" ]]; then
        print_error "node '${node_name}' is missing runtime information for interface 'eth${eth_index}'"
        exit 1
      fi

      local eth_info
      eth_info="$(rdo__call_host sudo nsenter --net="${sandbox_key}" -- ip -oneline link show dev "eth${eth_index}" |
                   sed -ne "s/^[0-9]*: eth\([0-9]*\)@if\([^:]*\):[^\$]*/ifname:eth\1 ifindex:\2/p")"

      if ! [[ "${eth_info}" =~ ^ifname:([^ ]*)\ ifindex:([^ ]*)$ ]]; then
        sleep 0.01
        continue
      fi

      local ifname="${BASH_REMATCH[1]:?Missing interface name.}"
      local iflink="$(( BASH_REMATCH[2] - 1 ))"
      local ifveth
      ifveth="$(rdo__call_host ip -oneline link | sed -ne "s/^[0-9]*: veth\([0-9a-f]*\)@if${iflink}:[^\$]*/veth\1/p")"

      mkdir "${self_path}/net/${ifname}"

      echo "${BASH_REMATCH[2]}" > "${self_path}/net/${ifname}/ifindex"
      echo "${iflink}" > "${self_path}/net/${ifname}/iflink"
      echo "${ifveth}" > "${self_path}/net/${ifname}/ifveth"

      break
    done

    echo "eth${eth_index}" > "${self_path}/interfaces/${network}/ifname"
    cp "${self_path}/net/eth${eth_index}/"{ifindex,iflink,ifveth} "${self_path}/interfaces/${network}/"

    : $(( eth_index++ ))
  done
}
