#!/usr/bin/env bash

include_header stage

rdo_stage() {
  local project_path
  project_path="$(get_project_path)"

  eval "$(args::init_subcommand "rdo stage" "Manage staging of environments.")"

  args::new_command "test" empty "Stage test environment" \
                    'rdo_stage_test'

  args::new_command "init" empty "Initialize new environment for staging" \
                    'rdo_stage_init'
  args::new_command "deploy" empty "Deploy environment" \
                    'rdo_stage_deploy'
  args::new_command "clean" empty "Remove environment" \
                    'rdo_stage_clean'

  args::new_command "network" default "Add network" \
                    'rdo_stage_network "${@}"'
  args::new_command "torrent" default "Add torrent" \
                    'rdo_stage_torrent "${@}"'
  args::new_command "dns-record" default "Add dns record" \
                    'rdo_stage_dns_record "${@}"'

  args::new_command "dns" default "Add dns server" \
                    'rdo_stage_dns "${@}"'
  args::new_command "rtorrent" default "Add node" \
                    'rdo_stage_rtorrent "${@}"'
  args::new_command "tracker" default "Add tracker" \
                    'rdo_stage_tracker "${@}"'

  eval "$(args::process)"
}

rdo_stage_test() {
  print_progress "staging test"

  rdo_stage_init
  rdo_stage_network "rt-network-1"
  rdo_stage_network "rt-network-2"
  rdo_stage_dns --run-template "dns-default" --network "rt-network-1" "rt-dns-1"

  # get dns ip from this point

  rdo_stage_tracker --run-template "tracker-default" --network "rt-network-1" --network "rt-network-2" "rt-tracker-1"
  rdo_stage_rtorrent --run-template "rt-default" --network "rt-network-1" --network "rt-network-2" "rt-seed-1"
  rdo_stage_rtorrent --run-template "rt-default" --network "rt-network-1" --network "rt-network-2" "rt-leech-1"
  rdo_stage_rtorrent --run-template "rt-default" --network "rt-network-1" --network "rt-network-2" "rt-leech-2"

  rdo_stage_dns_record --dns-server "rt-dns-1" --host "trackers/rt-tracker-1" --inet "rt-network-1" "rt-tracker-1.rt-network-1"

  print_progress "deploying test"
  rdo_stage_deploy
  print_progress "deployed test"
}

rdo_stage_clean() {
  rdo_node_clean > /dev/null
  rdo_network_clean > /dev/null
  rm -rf "./run/current"
  print_progress "stage cleaned"
}

rdo_stage_deploy() {
  local dns_list=()
  local node_list=()
  mapfile -t dns_list < <(ls "./run/current/dns/")
  mapfile -t node_list < <(ls "./run/current/nodes/")

  # verify all nodes are up.

  local node
  for node in "${dns_list[@]}"; do
    eval echo "\"$(cat "./run/current/dns/${node}/root.template")\"" > "./run/current/dns/${node}/root"
  done

  local node
  for node in "${node_list[@]}"; do
    echo "deploy" > "./run/current/nodes/${node}/signal"
  done

  print_progress "stage deployed"
}

rdo_stage_init() {
  # TODO: Add state, don't allow calls when not in initialize.
  rdo_stage_clean
  mkdir -p "./run/current/"{dns,networks,nodes,trackers,peers}
  print_progress "stage initialized"
}

rdo_stage_network() {
  eval "$(args::init_options_string "rdo stage network NAME" "name" "Add network to staging of environments.")"
  eval "$(args::process)"

  local path="./run/current/networks/${name}"
  mkdir -p "${path}"

  docker network create --label "project=rdo" "${name}" > /dev/null

  echo "$(rdo_network subnet "${name}")" > "${path}/subnet"
  echo "$(rdo_network address "${name}")" > "${path}/address"
  echo "$(rdo_network prefix "${name}")" > "${path}/prefix"

  echo "${name}"
}

rdo_stage_dns_record() {
  local dns_server=()
  local inet=()
  local host=

  eval "$(args::init_options_string "rdo stage dns-record NAME" "name" "Add dns record to staging")"

  args::new_option "dns-server" string "" "Dns server name" \
                   'dns_server+=("${args__1}")'
  args::new_option "host" string "" "Host name" \
                   'host="${args__1}"'
  args::new_option "inet" string "" "Network name to use for inet record" \
                   'inet="${args__1}"'

  eval "$(args::process)"

  : "${host:?Missing host argument.}"

  local network
  for network in "${inet[@]}"; do
    echo "${name} IN A \$(cat './run/current/${host}/interfaces/${network}/inet')" >> "./run/current/dns/${dns_server}/root.template"
  done

  echo "${name}"
}

rdo_stage_dns() {
  local create_args=()
  local networks=()

  eval "$(args::init_options_string "rdo stage dns NAME" "name" "Add dns to staging of environments.")"

  rdo_stage__container__default_args

  eval "$(args::process)"

  local self_type="dns"
  local image_name="rdo/run/coredns:global"

  create_args+=(
    --publish 53:53/udp
  )

  rdo_stage__container__create
  rdo_stage__container__start
  rdo_stage__container__update_run

  cat - > "./run/current/dns/${name}/root.template" <<EOF
\\\$ORIGIN local.
\\\$TTL 86400
@   IN  SOA     ns.icann.org. noc.dns.icann.org. (
        1           ;Serial
        7200        ;Refresh
        3600        ;Retry
        1209600     ;Expire
        3600        ;Minimum TTL
)

EOF

  echo "${name}"
}

rdo_stage_rtorrent() {
  local create_args=()
  local networks=()
  local run_template=

  eval "$(args::init_options_string "rdo stage node NAME" "name" "Add node to staging of environments.")"

  rdo_stage__container__default_args

  eval "$(args::process)"

  local self_type="peers"
  local image_name="rdo/run/rtorrent:default"

  local self_path="./run/current/${self_type}/${name}"
  mkdir -p "${self_path}/"{logs,session,torrents,watch}

  rdo_stage__container__create
  rdo_stage__container__start
  rdo_stage__container__update_run

  echo "${name}"
}

rdo_stage_tracker() {
  local create_args=()
  local networks=()

  eval "$(args::init_options_string "rdo stage tracker NAME" "name" "Add tracker to staging of environments.")"

  rdo_stage__container__default_args

  eval "$(args::process)"

  local self_type="trackers"
  local image_name="rdo/run/opentracker:global"

  create_args+=(
    --publish 6969:6969/udp
    --publish 6969:6969
  )

  rdo_stage__container__create
  rdo_stage__container__start
  rdo_stage__container__update_run

  echo "${name}"
}

# Helper functions

rdo_stage__container__default_args() {
  args::new_option "network" string "n" "Connect tracker to network" \
                   'networks+=("${args__1}")'
  args::new_option "run-template" string "r" "Use template to create run script" \
                   'run_template=("${args__1}")'
}

rdo_stage__container__create() {
  : "${run_template:?Missing run template argument.}"

  local self_path="./run/current/${self_type}/${name}"

  mkdir -p "${self_path}/interfaces"
  ln -s "../${self_type}/${name}" "./run/current/nodes/${name}"

  echo "stage" > "${self_path}/signal"

  "./templates/run/${run_template}" > "${self_path}/run"
  chmod a+x "${self_path}/run"

  if [[ -f "./templates/rc/${run_template}" ]]; then
    "./templates/rc/${run_template}" > "${self_path}/rc"
  fi

  create_args+=(
    --name "${name}"
    --tty
    --network "none"
    --mount "type=bind,source=$(project_absolute_unix_path)/run/current/${self_type}/${name}/,target=/run/self/"
  )

  docker container create --label "project=rdo" "${create_args[@]}" "${image_name}" > /dev/null
}

rdo_stage__container__start() {
  docker network disconnect "none" "${name}"

  for network in "${networks[@]}"; do
    docker network connect "${network}" "${name}"
  done

  docker start "${name}" > /dev/null
}

rdo_stage__container__update_run() {
  local self_path="./run/current/${self_type}/${name}"

  rm -rf "${self_path}/interfaces"

  local line
  while IFS= read -r line; do
    if ! [[ "${line}" =~ ^network:([^ ]*)\ mac:([^ ]*)\ inet:([^ ]*)\ inet6:([^ ]*)$ ]]; then
      print_error "invalid output from 'rdo node network '${name}'"
      continue
    fi

    local network="${BASH_REMATCH[1]:?Missing network name.}"
    local interface_path="${self_path}/interfaces/${network}"
    mkdir -p "${interface_path}"

    [[ -z "${BASH_REMATCH[2]}" ]] || echo "${BASH_REMATCH[2]}" > "${interface_path}/mac"
    [[ -z "${BASH_REMATCH[3]}" ]] || echo "${BASH_REMATCH[3]}" > "${interface_path}/inet"
    [[ -z "${BASH_REMATCH[4]}" ]] || echo "${BASH_REMATCH[4]}" > "${interface_path}/inet6"

  done <<< "$(rdo_node_network "${name}")"
}
