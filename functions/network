#!/usr/bin/env bash

include_header network

rdo_network() {
  eval "$(args::init_subcommand "rdo network" "Manage networks.")"

  args::new_command 'clean' empty 'Remove all networks' \
                    'rdo_network_clean'
  args::new_command 'ls' default 'List networks' \
                    'rdo_network_ls "${@}"'

  # TODO: Move all iptables stuff into sub-command:
  args::new_command 'iptables-flush' empty 'Flush rdo-specific iptables rules on docker host' \
                    'rdo_network_iptables_flush'
  args::new_command 'iptables-save' default 'Call iptables-save on docker host' \
                    'rdo_network_iptables_save "${@}"'

  args::new_command 'forward' default 'Add forward rules between networks' \
                    'rdo_network_forward "${@}"'
  args::new_command 'nat' default 'Add nat rules between networks' \
                    'rdo_network_nat "${@}"'

  args::new_command 'tc' default 'Call tc on docker host' \
                    'rdo_network_tc "${@}"'
  args::new_command 'tc-replace-root-tbf' default 'Replace tc root tbf rule of node' \
                    'rdo_network_tc_replace_root_tbf "${@}"'
  args::new_command 'tc-del-root' default 'Delete root rule of node' \
                    'rdo_network_tc_del_root "${@}"'

  eval "$(args::process)"
}

rdo_network_clean() {
  rdo_network_iptables_flush

  local networks
  mapfile -t networks < <(rdo_network_ls --quiet --no-trunc)

  if (( ${#networks[@]} > 0 )); then
    docker network rm "${networks[@]}" &> /dev/null
  fi
}

rdo_network_ls() {
  docker network ls --filter "label=project=rdo" "${@}"
}

rdo_network_iptables_flush() {
  local ipv4_nat_rules ipv4_filter_rules
  local ipv6_nat_rules ipv6_filter_rules

  ipv4_nat_rules="$(rdo__sudo_host iptables-save     --table nat    | sed -n -e 's/^-A /sudo iptables --table nat -D /p')"
  ipv6_nat_rules="$(rdo__sudo_host ip6tables-save    --table nat    | sed -n -e 's/^-A /sudo ip6tables --table nat -D /p')"
  ipv4_filter_rules="$(rdo__sudo_host iptables-save  --table filter | sed -n -e 's/^-A /sudo iptables --table filter -D /p')"
  ipv6_filter_rules="$(rdo__sudo_host ip6tables-save --table filter | sed -n -e 's/^-A /sudo ip6tables --table filter -D /p')"

  local cmd_list
  cmd_list="$(printf "%s\n%s\n" "${ipv4_nat_rules}" "${ipv6_nat_rules}" "${ipv4_filter_rules}" "${ipv6_filter_rules}" | sed -n -e '/ -m comment --comment "rdo network/p')"

  if [[ -n "${rules}" ]]; then
    rdo__sudo_host bash -c "\"$(printf "%s && " "${cmd_list[@]}" && printf ":\n")\""
  fi
}

rdo_network_iptables_save() {
  rdo__call_host sudo iptables-save "${@}"
}

rdo_network_forward() {
  # eval "$(args::init_options_empty "rdo network forward" "Add FORWARD route between networks.")"

  # args::new_option "bridge"       req_string "" "Use bridge egress" 'local bridge_name' 'bridge_name="${args__1}"'
  # args::new_option "ingress"      string "" "Add ipv4/6 ingress" '' 'ingress_4+=("${args__1}"); ingress_6+=("${args__1}")'
  # args::new_option "ingress-ipv4" string "" "Add ipv4 ingress" 'local ingress_4=()' 'ingress_4+=("${args__1}")'
  # args::new_option "ingress-ipv6" string "" "Add ipv6 ingress" 'local ingress_6=()' 'ingress_6+=("${args__1}")'

  # eval "$(args::process)"

  # start of generated bash args 'rdo network forward'

  local bridge_name
  local ingress_4=()
  local ingress_6=()
  local args__opt_value__bridge=
  local args__opt_value__ingress=
  local args__opt_value__ingress_ipv4=
  local args__opt_value__ingress_ipv6=

  while true; do
    case "${1}" in
      --bridge)
        local args__1="${2:?Missing argument for '${1}'.}"
        args__opt_value__bridge="${args__1}"
        shift 2
        bridge_name="${args__1}"
        ;;
      --ingress)
        local args__1="${2:?Missing argument for '${1}'.}"
        args__opt_value__ingress="${args__1}"
        shift 2
        ingress_4+=("${args__1}"); ingress_6+=("${args__1}")
        ;;
      --ingress-ipv4)
        local args__1="${2:?Missing argument for '${1}'.}"
        args__opt_value__ingress_ipv4="${args__1}"
        shift 2
        ingress_4+=("${args__1}")
        ;;
      --ingress-ipv6)
        local args__1="${2:?Missing argument for '${1}'.}"
        args__opt_value__ingress_ipv6="${args__1}"
        shift 2
        ingress_6+=("${args__1}")
        ;;
      --help|-h)
        echo "Usage: rdo network forward"
        echo
        echo "Add FORWARD route between networks."
        echo
        echo "Options:"
        echo "      --bridge         Use bridge egress"
        echo "      --ingress        Add ipv4/6 ingress"
        echo "      --ingress-ipv4   Add ipv4 ingress"
        echo "      --ingress-ipv6   Add ipv6 ingress"
        echo
        echo "Run 'rdo network forward COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  if [[ -z "${args__opt_value__bridge}" ]]; then
    print_error "${args__root}: missing required flag: --bridge"
    return 1
  fi

  if (( ${#} > 0 )); then
    print_error "rdo network forward: too many arguments"
    exit 1
  fi

  # end of generated bash args 'rdo network forward'

  local cmd_list=()

  local outer_network_bridge
  outer_network_bridge="$(cat "./run/current/networks/${bridge_name}/ifname")"

  local ingress_network
  for ingress_network in "${ingress_4[@]}"; do
    local ifname
    ifname="$(cat "./run/current/networks/${ingress_network}/ifname")"

    local rule_args=(
      -m comment
      --comment "'rdo network forward ${ingress_network}->${bridge_name}'"
    )

    cmd_list+=(
      "iptables ${rule_args[*]} -t filter -I DOCKER-USER -i '${outer_network_bridge}' -o '${ifname}' -j ACCEPT"
      "iptables ${rule_args[*]} -t filter -I DOCKER-USER -i '${ifname}' -o '${outer_network_bridge}' -j ACCEPT"
    )
  done

  local ingress_network
  for ingress_network in "${ingress_6[@]}"; do
    local ifname
    ifname="$(cat "./run/current/networks/${ingress_network}/ifname")"

    local rule_args=(
      -m comment
      --comment "'rdo network forward ${ingress_network}->${bridge_name}'"
    )

    cmd_list+=(
      "ip6tables ${rule_args[*]} -t filter -I DOCKER-USER -i '${outer_network_bridge}' -o '${ifname}' -j ACCEPT"
      "ip6tables ${rule_args[*]} -t filter -I DOCKER-USER -i '${ifname}' -o '${outer_network_bridge}' -j ACCEPT"
    )
  done

  rdo__sudo_host bash -c "\"$(printf "%s && " "${cmd_list[@]}" && printf ":\n")\""
}

rdo_network_nat() {
  # eval "$(args::init_options_empty "rdo network nat" "Add NAT route.")"

  # args::new_option "bridge" req_string "" "Use bridge egress" 'local bridge_name' 'bridge_name="${args__1}"'
  # args::new_option "network" req_string "" "Add inner network" 'local inner_networks=()' 'inner_networks+=("${args__1}")'

  # eval "$(args::process)"

  # start of generated bash args 'rdo network nat'

  local bridge_name
  local inner_networks=()
  local args__opt_value__network=

  while true; do
    case "${1}" in
      --bridge)
        local args__1="${2:?Missing argument for '${1}'.}"
        shift 2
        bridge_name="${args__1}"
        ;;
      --network)
        local args__1="${2:?Missing argument for '${1}'.}"
        local args__opt_value__network="${args__1}"
        shift 2
        inner_networks+=("${args__1}")
        ;;
      --help|-h)
        echo "Usage: rdo network nat"
        echo
        echo "Add NAT route."
        echo
        echo "Options:"
        echo "      --bridge    Use bridge egress"
        echo "      --network   Add inner network"
        echo
        echo "Run 'rdo network nat COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  if [[ -z "${args__opt_value__network}" ]]; then
    print_error "${args__root}: missing required flag: --network"
    return 1
  fi

  if (( ${#} > 0 )); then
    print_error "rdo network nat: too many arguments"
    exit 1
  fi

  # end of generated bash args 'rdo network nat'

  local egress_ifname
  local egress_iflink

  if [[ -n "${bridge_name}" ]]; then
    egress_ifname="$(cat "./run/current/networks/${bridge_name}/ifname")"
    egress_iflink="${bridge_name}"
  fi

  if (( ${#inner_networks[@]} == 0 )); then
    print_error "rdo network nat: Missing inner networks."
    return 1
  fi

  local egress_ipaddr_list=()
  mapfile -t egress_ipaddr_list < <(rdo__call_host ip -4 addr show dev "${egress_ifname}"| sed -ne 's|.*inet \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*/[0-9]*\).*|\1|p')

  if ! [[ "${egress_ipaddr_list[-1]}" =~ ([0-9]*\.[0-9]*\.[0-9]*)\.([0-9]*)\/([0-9]*) ]]; then
    print_error "rdo network nat: egress interface '${egress_ifname}' does not have any addresses"
    return 1
  fi

  local egress_ipaddr
  local egress_prefix="${BASH_REMATCH[3]}"

  if (( BASH_REMATCH[2] < 200 )); then
    egress_ipaddr="${BASH_REMATCH[1]}.$(( 200 ))"
  else
    egress_ipaddr="${BASH_REMATCH[1]}.$(( BASH_REMATCH[2] + 1 ))"
  fi

  rdo__sudo_host ip addr add "${egress_ipaddr}/${egress_prefix}" scope global dev "${egress_ifname}"

  local cmd_list=()
  local inner_network
  for inner_network in "${inner_networks[@]}"; do
    local inner_network_bridge
    local inner_network_index
    inner_network_bridge="$(cat "./run/current/networks/${inner_network}/ifname")"
    inner_network_index="$(cat "./run/current/networks/${inner_network}/index")"

    local mark=$(( 0x30000 + inner_network_index ))
    local rule_args=(
      -m comment
      --comment "'rdo network nat ${inner_network}->${egress_iflink}(${egress_ifname}:${egress_ipaddr})'"
    )

    cmd_list+=(
      "iptables ${rule_args[*]} -t nat    -I POSTROUTING -o '${egress_ifname}' -m mark --mark '${mark}' -j SNAT --to-source '${egress_ipaddr}'"
      "iptables ${rule_args[*]} -t filter -I DOCKER-USER -i '${inner_network_bridge}' -o '${egress_ifname}' -j ACCEPT"
      "iptables ${rule_args[*]} -t filter -I DOCKER-USER -i '${egress_ifname}' -o '${inner_network_bridge}' -m state --state RELATED,ESTABLISHED -j ACCEPT"
      "iptables ${rule_args[*]} -t filter -I DOCKER-USER -i '${inner_network_bridge}' -o '${egress_ifname}' -j MARK --set-mark '${mark}'"
    )
  done

  rdo__sudo_host bash -c "\"$(printf "%s && " "${cmd_list[@]}" && printf ":\n")\""
}

rdo_network_tc() {
  rdo__call_host sudo tc "${@}"
}

rdo_network_tc_replace_root_tbf() {
  # eval "$(args::init_options_default "rdo network tc-replace-root-tbf [NODE-NAME]..." "Replace tc root tbf rule of nodes.")"

  # # Using rate < 8kbit kills docker containers.
  # args::new_option "rate" req_string "" "Limit ingress traffic rate" \
  #                  'local rate' 'rate="${args__1}"'

  # # TODO: TC and handshakes seem to cause issues with 8kbit.
  # args::new_option "rate-epsilon" empty "" "Limit ingress traffic rate to lowest possible (200kbit)" \
  #                  'local rate' 'rate=200kbit; args__opt_value__rate=200kbit'

  # eval "$(args::process)"

  # start of generated bash args 'rdo network tc-replace-root-tbf [NODE-NAME]...'

  local rate
  local rate
  local args__opt_value__rate=

  while true; do
    case "${1}" in
      --rate)
        local args__1="${2:?Missing argument for '${1}'.}"
        local args__opt_value__rate="${args__1}"
        shift 2
        rate="${args__1}"
        ;;
      --rate-epsilon)
        shift
        rate=200kbit; args__opt_value__rate=200kbit
        ;;
      --help|-h)
        echo "Usage: rdo network tc-replace-root-tbf [NODE-NAME]..."
        echo
        echo "Replace tc root tbf rule of nodes."
        echo
        echo "Options:"
        echo "      --rate           Limit ingress traffic rate"
        echo "      --rate-epsilon   Limit ingress traffic rate to lowest possible (200kbit)"
        echo
        echo "Run 'rdo network tc-replace-root-tbf [NODE-NAME]... COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  if [[ -z "${args__opt_value__rate}" ]]; then
    print_error "${args__root}: missing required flag: --rate"
    return 1
  fi

  # end of generated bash args 'rdo network tc-replace-root-tbf [NODE-NAME]...'

  local cmd_list

  local node_name
  for node_name in "${@}"; do
    local node_ifname
    node_ifname="$(cat "./run/current/nodes/${node_name}/net/eth0/iflink")"

    tc_command=(
      tc qdisc replace dev "'${node_ifname}'"
      root tbf
      rate "'${rate}'"
      latency 50ms

      # burst 1540 # causes(?) eh_no_peer_info when using NAT (tests/ci-throttle 9a0bd9c078381892f11c662a1f52a83855223334)
      burst 1540
    )

    cmd_list+="$(echo "echo 'tc_replace_root_tbf/${node_name}/${node_ifname}/rate:${rate}' && ${tc_command[@]} && ")"
  done

  rdo__sudo_host bash -c "\"${cmd_list} : \""
}

rdo_network_tc_del_root() {
  # eval "$(args::init_options_default "rdo network tc-del-root [NODE-NAME]..." "Delete root rule of nodes.")"

  # eval "$(args::process)"

  # start of generated bash args 'rdo network tc-del-root [NODE-NAME]...'

  while true; do
    case "${1}" in
      --help|-h)
        echo "Usage: rdo network tc-del-root [NODE-NAME]..."
        echo
        echo "Delete root rule of nodes."
        echo
        echo "Run 'rdo network tc-del-root [NODE-NAME]... COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  # end of generated bash args 'rdo network tc-del-root [NODE-NAME]...'

  local cmd_list

  local node_name
  for node_name in "${@}"; do
    local node_ifname
    node_ifname="$(cat "./run/current/nodes/${node_name}/net/eth0/iflink")"

    tc_command=(
      tc qdisc del dev "'${node_ifname}'"
      root
    )

    cmd_list+="$(echo "echo 'tc_del_root/${node_name}/${node_ifname}' && ${tc_command[@]} && ")"
  done

  rdo__sudo_host bash -c "\"${cmd_list} : \""
}
