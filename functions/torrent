#!/usr/bin/env bash

include_header torrent

rdo_torrent() {
  eval "$(args::init_subcommand "rdo torrent" "Manage torrents.")"

  args::new_command "create" default "Create a torrent" \
                    'rdo_torrent_create "${@}"'

  args::new_command "node" default "Add a torrent to a client node" \
                    'rdo_torrent_node "${@}"'

  eval "$(args::process)"
}

rdo_torrent_create() {
  rdo_torrent__init

  eval "$(args::init_options_string "rdo torrent create NAME" "name" "Create a torrent.")"

  args::new_option "url" req_string "" "Announce url" \
                   'local url="${args__1}"'

  eval "$(args::process)"

  local self_path="./run/torrents/${name}"

  # TODO: Don't recreate.

  rm -rf "${self_path}"{,.torrent}
  mkdir -p "${self_path}"

  rdo_torrent__create_random_file "/torrents/${name}/file"

  local create_args=(
    #-a "http://example.com:1234/announce.php"
    -a "${url}"
    -n "${name}"
    -o "/torrents/${name}.torrent"
  )

  create_args+=("/torrents/${name}")

  docker exec -t "rdo-utils-mktorrent" mktorrent "${create_args[@]}" > /dev/null
}

rdo_torrent_node() {
  rdo_torrent__init

  local seed=

  eval "$(args::init_options_string "rdo torrent node NAME" "name" "Add torrent to a client node.")"

  args::new_option "node" req_string "" "Client node name" \
                   'local node="${args__1}"'
  args::new_option "seed" empty "" "Seed torrent" \
                   'seed=yes'

  eval "$(args::process)"

  local self_path="./run/torrents/${name}"
  local node_path="./run/current/clients/${node}"

  if [[ ! -f "${self_path}.torrent" ]]; then
    print_error "could not find torrent: ${self_path}.torrent"
    return 1
  fi

  if [[ "${seed}" == "yes" ]]; then
    cp -r "${self_path}" "${node_path}/torrents/${name}"
  fi

  cp -r "${self_path}.torrent" "${node_path}/watch/${name}.torrent"
}

# Helper methods:

rdo_torrent__init() {
  if [[ -n "$(rdo__running_container_id__name "rdo-utils-mktorrent")" ]]; then
    return
  fi

  if [[ -n "$(rdo__container_id__name "rdo-utils-mktorrent")" ]]; then
    docker rm "rdo-utils-mktorrent"
  fi

  rdo_docker context build --empty --cache --no-rebuild --ancestor-project "utils" "run/mktorrent:global"

  mkdir -p "./run/torrents"

  docker run \
         --name "rdo-utils-mktorrent" \
         --rm \
         --detach \
         --network none \
         --mount "type=bind,src=$(project_absolute_unix_path)/run/torrents/,dst=/torrents" \
         "rdo/run/mktorrent:global"
}

rdo_torrent__create_random_file() {
  local filename="${1:?Missing filename argument.}"

  local cmd="head -c '$(( 5 * 1024 * 1024 ))' < <(head -c 8000 /dev/urandom; while true; do cat '${filename}'; done) > '${filename}'"

  docker exec -t "rdo-utils-mktorrent" bash -c "${cmd}"
}
