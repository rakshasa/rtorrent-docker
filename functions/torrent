#!/usr/bin/env bash

include_header torrent

RDO_MKTORRENT_CONTAINER_NAME="rt-global-utils-mktorrent"

rdo_torrent() {
  eval "$(args::init_subcommand "rdo torrent" "Manage torrents.")"

  args::new_command "create" default "Create a torrent" \
                    'rdo_torrent_create "${@}"'
  args::new_command "wait" default "Wait for a set of torrent events" \
                    'rdo_torrent_wait "${@}"'

  args::new_command "node" default "Add a torrent to a client node" \
                    'rdo_torrent_node "${@}"'

  eval "$(args::process)"
}

rdo_torrent_create() {
  rdo_torrent__init

  eval "$(args::init_options_string "rdo torrent create NAME" "name" "Create a torrent.")"

  args::new_option "domain" string "" "Tracker domain name" \
                   'local url' 'url="$(rdo_torrent__announce_url "${args__1}")"'
  args::new_option "size-kb" string "" "Size in kilobytes" \
                   'local torrent_size=$(( 1024 * 1024 ))' 'torrent_size=$(( args__1 * 1024 ))'
  args::new_option "size-mb" string "" "Size in megabytes" \
                   '' 'torrent_size=$(( args__1 * 1024 * 1024 ))'

  eval "$(args::process)"

  local self_path="./run/torrents/${name}"

  # TODO: Don't recreate.

  rm -rf "${self_path}"{,.torrent}

  mkdir -p "${self_path}"
  rdo_torrent__create_random_file "/torrents/${name}/file" "${torrent_size}"

  local create_args=(
    #-a "http://example.com:1234/announce.php"
    -a "${url}"
    -n "${name}"
    -o "/torrents/${name}.torrent"
  )

  create_args+=("/torrents/${name}")

  docker exec -t "${RDO_MKTORRENT_CONTAINER_NAME}" mktorrent "${create_args[@]}" > /dev/null

  echo "torrents/${name}"
}

rdo_torrent_node() {
  # eval "$(args::init_options_string "rdo torrent node TORRENT-NAME" "torrent_name" "Add torrent to client nodes.")"

  # args::new_option "leecher" string "" "Add leecher node" \
  #                  'local leecher=()' 'leecher+=("${args__1}")'
  # args::new_option "seeder" string "" "Add seeder node" \
  #                  'local seeder=()' 'seeder+=("${args__1}")'

  # eval "$(args::process)"

  # start of generated bash args 'rdo torrent node TORRENT-NAME'

  local leecher=()
  local seeder=()

  while true; do
    case "${1}" in
      --leecher)
        local args__1="${2:?Missing argument for '${1}'.}"
        shift 2
        leecher+=("${args__1}")
        ;;
      --seeder)
        local args__1="${2:?Missing argument for '${1}'.}"
        shift 2
        seeder+=("${args__1}")
        ;;
      --help|-h)
        echo "Usage: rdo torrent node TORRENT-NAME"
        echo
        echo "Add torrent to client nodes."
        echo
        echo "Options:"
        echo "      --leecher   Add leecher node"
        echo "      --seeder    Add seeder node"
        echo
        echo "Run 'rdo torrent node TORRENT-NAME COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  if (( ${#} > 1 )); then
    print_error "rdo torrent node TORRENT-NAME: too many arguments"
    exit 1
  fi

  if (( ${#} == 0 )) || [[ -z "${1}" ]]; then
    print_error "rdo torrent node TORRENT-NAME: missing or empty argument"
    exit 1
  fi

  local torrent_name="${1}"
  shift

  # end of generated bash args 'rdo torrent node TORRENT-NAME'

  local self_path="./run/torrents/${torrent_name}"

  local node_name
  for node_name in "${seeder[@]}"; do
    if ! [[ -d "./run/current/clients/${node_name}" ]]; then
      print_error "could not find seeder client: ${node_name}"
      return 1
    fi

    tar -cf - -C "$(dirname "${self_path}")" "$(basename "${self_path}")" | docker exec -i "${node_name}" tar -xf - -C "/torrents"
  done

  for node_name in "${seeder[@]}" "${leecher[@]}"; do
    local node_path="./run/current/clients/${node_name}"

    if [[ ! -f "${self_path}.torrent" ]]; then
      print_error "could not find torrent: ${self_path}.torrent"
      return 1
    fi

    cp -r "${self_path}.torrent" "${node_path}/watch/${torrent_name}.torrent"

    print_normal "torrent/${torrent_name}/node/${node_name}"
  done
}

# Helper methods:

rdo_torrent__init() {
  if [[ -n "$(rdo__running_container_id__name "${RDO_MKTORRENT_CONTAINER_NAME}")" ]]; then
    return
  fi

  if [[ -n "$(rdo__container_id__name "${RDO_MKTORRENT_CONTAINER_NAME}")" ]]; then
    docker rm "${RDO_MKTORRENT_CONTAINER_NAME}"
  fi

  : "${RDO_RUN_PATH:?Missing environment variable.}"

  mkdir -p "./run/torrents"

  docker run \
         --name "${RDO_MKTORRENT_CONTAINER_NAME}" \
         --rm \
         --detach \
         --network none \
         --mount "type=bind,src=${RDO_RUN_PATH}/torrents/,dst=/torrents" \
         "rdo/run/mktorrent:global"
}

rdo_torrent__create_random_file() {
  local filename="${1:?Missing filename argument.}"
  local filesize="${2:?Missing filesize argument.}"

  local cmd="head -c '${filesize}' < <(head -c 8000 /dev/urandom; while true; do cat '${filename}'; done) > '${filename}'"

  docker exec -t "${RDO_MKTORRENT_CONTAINER_NAME}" bash -c "${cmd}"
}

rdo_torrent__announce_url() {
  local arg="${1:?Missing argument.}"
  local parts=()
  local part
  local url

  IFS=',' read -r -a parts <<< "${arg}"

  # parts are in format 'http:domain' or 'udp:domain'
  for part in "${parts[@]}"; do
    IFS=':' read -r -a part <<< "${part}"

    if (( ${#part[@]} == 1 )); then
      part=("http" "${part[0]}")
    fi

    if (( ${#part[@]} != 2 )); then
      print_error "Invalid announce URL: ${part}"
      return 1
    fi

    if [[ "${part[0]}" == "http" ]]; then
      url+="http://${part[1]}:6969/announce.php,"
    elif [[ "${part[0]}" == "udp" ]]; then
      url+="udp://${part[1]}:6969,"
    else
      print_error "Unknown protocol: ${part[0]}"
      return 1
    fi
  done

  echo "${url%,}"
}




