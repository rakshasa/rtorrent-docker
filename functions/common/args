#!/usr/bin/env bash
#
# Copyright (C) 2020 by Jari Petter Sundell <sundell.software@gmail.com>
#
# Permission to use, copy, modify, and/or distribute this software for any purpose
# with or without fee is hereby granted.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
# TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
# THIS SOFTWARE.

include_header common/args

args::__init() {
  local name="${1:?Missing root argument.}"
  local description="${2:?Missing description argument.}"

  cat - <<EOF
local args__is_processing=yes
local args__root="${name}"
local args__root_description="${description}"
local args__arg_name=
local args__extra_args=
local args__has_commands=
local args__has_options=
local args__skip_unknown=
declare -a args__options
declare -A args__option_types
declare -A args__option_flags
declare -A args__option_descriptions
declare -A args__option_inits
declare -A args__option_blocks
declare -a args__commands
declare -A args__command_types
declare -A args__command_descriptions
declare -A args__command_blocks
EOF
}

args::init_subcommand() {
  args::__init "${@}"
  cat - <<EOF
local args__has_commands=yes
local args__has_options=yes
local args__extra_args=default
EOF
}

args::init_options_default() {
  args::__init "${@}"
  cat - <<EOF
local args__has_commands=no
local args__has_options=yes
local args__extra_args=default
EOF
}

args::init_options_default_skip_unknown() {
  args::__init "${@}"
  cat - <<EOF
local args__has_commands=no
local args__has_options=yes
local args__extra_args=default
local args__skip_unknown=yes
EOF
}

args::init_options_empty() {
  args::__init "${@}"
  cat - <<EOF
local args__has_commands=no
local args__has_options=yes
local args__extra_args=empty
EOF
}

args::init_options_string() {
  local arg_name="${2:?Missing arg name argument.}"

  args::__init "${1:?Missing first argument.}" "${@:3}"
  cat - <<EOF
local args__arg_name="${arg_name}"
local args__has_commands=no
local args__has_options=yes
local args__extra_args=string
EOF
}

args::new_option() {
  local name="${1:?Missing name argument.}"
  args__options+=("${name}")
  args__option_types[${name}]="${2:?Missing type argument.}"
  args__option_flags[${name}]="${3}"
  args__option_descriptions[${name}]="${4:?Missing description argument.}"
  args__option_inits[${name}]="${5}"
  args__option_blocks[${name}]="${6}"
}

args::new_command() {
  local name="${1:?Missing name argument.}"
  args__commands+=("${name}")
  args__command_types[${name}]="${2:?Missing type argument.}"
  args__command_descriptions[${name}]="${3:?Missing description argument.}"
  args__command_blocks[${name}]="${4:?Missing block argument.}"
}

args::verify_command_empty() {
  if (( ${#} > 0 )); then
    print_error "${args__root} ${args__cmd}: junk at end of input: ${@}"
    exit 1
  fi
}

args::verify_command_string() {
  if (( ${#} != 1 )) || [[ -z "${1:-}" ]]; then
    print_error "${args__root} ${args__cmd}: argument must be a single string: ${@}"
    exit 1
  fi
}

args::process_options() {
  local name skip_line
  for name in "${args__options[@]}"; do
    if [[ -n "${args__option_inits[${name}]}" ]]; then
      skip_line=yes
      cat - <<EOF
${args__option_inits[${name}]}
EOF
    fi
  done

  for name in "${args__options[@]}"; do
    case "${args__option_types[${name}]}" in
      string|req_string)
        skip_line=yes
        cat - <<EOF
local args__opt_value__${name//-/_}=
EOF
        ;;
      string2*|req_string2*)
        skip_line=yes
        cat - <<EOF
local args__opt_value__${name//-/_}_1=
local args__opt_value__${name//-/_}_2=
EOF
        ;;
    esac
  done

  if [[ "${skip_line:-}" == "yes" ]]; then
    printf '\n'
  fi

  cat - <<EOF
while true; do
  case "\${1:-}" in
EOF

  if [[ -v args__options ]] && (( ${#args__options[@]} != 0 )); then
    local name
    for name in "${args__options[@]}"; do
      if [[ -n "${args__option_flags[${name}]}" ]]; then
        cat - <<EOF
    --${name}|-${args__option_flags[${name}]})
EOF
      else
        cat - <<EOF
    --${name})
EOF
      fi

      local opt_type="${args__option_types[${name}]}"
      case "${opt_type}" in
        empty)
          cat - <<EOF
      shift
EOF
          if [[ -n "${args__option_blocks[${name}]}" ]]; then
            cat - <<EOF
      ${args__option_blocks[${name}]}
EOF
          fi
          ;;
        string)
          cat - <<EOF
      local args__1="\${2:?Missing argument for '\${1}'.}"
      args__opt_value__${name//-/_}="\${args__1}"
      shift 2
EOF
          if [[ -n "${args__option_blocks[${name}]}" ]]; then
            cat - <<EOF
      ${args__option_blocks[${name}]}
EOF
          fi
          ;;
        string2)
          cat - <<EOF
      local args__1="\${2:?Missing argument for '\${1}'.}"
      local args__2="\${3:?Missing argument for '\${1}'.}"
      args__opt_value__${name//-/_}_1="\${args__1}"
      args__opt_value__${name//-/_}_2="\${args__2}"
      shift 3
EOF
          if [[ -n "${args__option_blocks[${name}]}" ]]; then
            cat - <<EOF
      ${args__option_blocks[${name}]}
EOF
          fi
          ;;
        string2*)
          cat - <<EOF
      local args__1="\${2%%${opt_type#string2}*}"
      local args__2="\${2##*${opt_type#string2}}"
      local args__1="\${args__1:?Missing argument for '\${1}'.}"
      local args__2="\${args__2:?Missing argument for '\${1}'.}"
      args__opt_value__${name//-/_}_1="\${args__1}"
      args__opt_value__${name//-/_}_2="\${args__2}"

      if [[ "\${args__1}${opt_type#string2}\${args__2}" != "\${2}" ]]; then
        ${args__print_error} "\${args__root}: invalid option format: \${1} \${2}"
        return 1
      fi

      shift 2
EOF
          if [[ -n "${args__option_blocks[${name}]}" ]]; then
            cat - <<EOF
      ${args__option_blocks[${name}]}
EOF
          fi
          ;;
        req_string)
          cat - <<EOF
      local args__1="\${2:?Missing argument for '\${1}'.}"
      args__opt_value__${name//-/_}="\${args__1}"
      shift 2
EOF
          if [[ -n "${args__option_blocks[${name}]}" ]]; then
            cat - <<EOF
      ${args__option_blocks[${name}]}
EOF
          fi
          ;;
        req_string2)
          cat - <<EOF
      local args__1="\${2:?Missing argument for '\${1}'.}"
      local args__2="\${3:?Missing argument for '\${1}'.}"
      args__opt_value__${name//-/_}_1="\${args__1}"
      args__opt_value__${name//-/_}_2="\${args__2}"
      shift 3
EOF
          if [[ -n "${args__option_blocks[${name}]}" ]]; then
            cat - <<EOF
      ${args__option_blocks[${name}]}
EOF
          fi
          ;;
        req_string2*)
          cat - <<EOF
      local args__1="\${2%%${opt_type#string2}*}"
      local args__2="\${2##*${opt_type#string2}}"
      local args__1="\${args__1:?Missing argument for '\${1}'.}"
      local args__2="\${args__2:?Missing argument for '\${1}'.}"
      args__opt_value__${name//-/_}_1="\${args__1}"
      args__opt_value__${name//-/_}_2="\${args__2}"

      if [[ "\${args_1}${opt_type#string2}\${args_2}" != "\${2}" ]]; then
        ${args__print_error} "\${args__root}: invalid option format: \${1} \${2}"
        return 1
      fi

      shift 2
EOF
          if [[ -n "${args__option_blocks[${name}]}" ]]; then
            cat - <<EOF
      ${args__option_blocks[${name}]}
EOF
          fi
          ;;
        *)
          print_error "${args__root}: invalid type for '--${name}'"
          exit 1
          ;;
      esac

      cat - <<EOF
      ;;
EOF
    done
  fi

  if [[ "${args__has_commands}" == "yes" ]]; then
    cat - <<EOF
    --help|-h|'')
EOF
  else
    cat - <<EOF
    --help|-h)
EOF
  fi

  args::print_help

  cat - <<EOF
      exit 0
      ;;
EOF

  if [[ "${args__is_processing}" == "yes" ]]; then
    cat - <<EOF
    ---print-self)
      args::print_process
      return
      ;;
    ---print-self-bare)
      local args__print_error="echo"
      args::print_process
      return
      ;;
EOF
  fi

  cat - <<EOF
    *)
EOF

  if [[ "${args__skip_unknown}" != "yes" ]]; then
    cat - <<EOF
      if [[ -n "\${1:-}" ]] && [[ -z "\${1##-*}" ]]; then
        ${args__print_error} "\${args__root}: unknown flag: \${1}"
        return 1
      fi

EOF
  fi

  cat - <<EOF
      break
      ;;
  esac
done
EOF

  local name
  for name in "${args__options[@]}"; do
    case "${args__option_types[${name}]}" in
      req_string)
        cat - <<EOF

if [[ -z "\${args__opt_value__${name//-/_}}" ]]; then
  ${args__print_error} "\${args__root}: missing required flag: --${name}"
  return 1
fi
EOF
        ;;
      req_string2*)
        cat - <<EOF

if [[ -z "\${args__opt_value__${name//-/_}}_1" ]] || [[ -z "\${args__opt_value__${name//-/_}}_2" ]]; then
  ${args__print_error} "\${args__root}: missing required flag: --${name}"
  return 1
fi
EOF
        ;;
    esac
  done
}

args::process_command() {
  cat - <<EOF
local args__root="${args__root}"
local args__cmd="\${1:-}"
shift || :

case "\${args__cmd}" in
EOF

  if (( ${#args__commands[@]} != 0 )); then
    local name
    for name in "${args__commands[@]}"; do
      cat - <<EOF
  ${name})
EOF

      case "${args__command_types[${name}]}" in
        empty)
          cat - <<EOF
    args::verify_command_empty "\${@}"
    ${args__command_blocks[${name}]}
EOF
          ;;
        default)
          cat - <<EOF
    ${args__command_blocks[${name}]}
EOF
          ;;
        string)
          cat - <<EOF
    args::verify_command_string "\${@}"
    ${args__command_blocks[${name}]}
EOF
          ;;
        *)
          print_error "${args__root}: invalid type for '${name}'"
          exit 1
          ;;
      esac

          cat - <<EOF
    ;;
EOF
    done
  fi

  if [[ "${args__is_processing}" == "yes" ]]; then
    cat - <<EOF
  __print_self)
    args::print_process
    return
    ;;
EOF
  fi

  cat - <<EOF
  *)
    ${args__print_error} "${args__root}: unknown command: \${args__cmd}"
    exit 1
    ;;
esac
EOF
}

args::print_help() {
  cat - <<EOF
      echo "Usage: ${args__root}"
      echo
      echo "${args__root_description}"
EOF

  local options_width command_width justify_width
  options_width=$(( $(utils::array_value_max_width "args__options") + 6 ))
  command_width=$(utils::array_value_max_width "args__commands")

  if (( ${options_width} > ${command_width} )); then
    justify_width=${options_width}
  else
    justify_width=${command_width}
  fi

  if [[ -v args__options ]] && (( ${#args__options[@]} != 0 )); then
    cat - <<EOF
      echo
      echo "Options:"
EOF

    local name justified_name
    for name in "${args__options[@]}"; do
      justified_name=$(utils::justify_string "$(( ${justify_width} - 6 ))" "${name}")

      if [[ -n "${args__option_flags[${name}]}" ]]; then
        justified_name="-${args__option_flags[${name}]}, --${justified_name}"
      else
        justified_name="    --${justified_name}"
      fi

      cat - <<EOF
      echo "  ${justified_name}   ${args__option_descriptions[${name}]}"
EOF
    done
  fi

  if [[ -v args__commands ]] && (( ${#args__commands[@]} != 0 )); then
      cat - <<EOF
      echo
      echo "Commands:"
EOF

    local name
    for name in "${args__commands[@]}"; do
      cat - <<EOF
      echo "  $(utils::justify_string "${justify_width}" "${name}")   ${args__command_descriptions[${name}]}"
EOF
    done
  fi

  cat - <<EOF
      echo
      echo "Run '${args__root} COMMAND --help' for more information on a command."
EOF
}

args::process() {
  if [[ "${args__is_processing}" != "no" ]]; then
    # print_normal "args::process->${args__root}" >&2
    :
  fi

  local args__need_seperator="no"
  local args__print_error="${args__print_error:-print_error}"

  if [[ "${args__has_options}" == "yes" ]]; then
    args::process_options
    args__need_seperator=yes
  fi

  if [[ "${args__has_commands}" == "yes" ]]; then
    if [[ "${args__need_seperator}" == "yes" ]]; then
      echo
    fi

    args::process_command
    args__need_seperator=yes
  fi

  case "${args__extra_args}" in
    default)
      :
      ;;
    empty)
      cat - <<EOF

if (( \${#} > 0 )); then
  ${args__print_error} "${args__root}: too many arguments"
  exit 1
fi

EOF
      ;;
    string)
      cat - <<EOF

if (( \${#} > 1 )); then
  ${args__print_error} "${args__root}: too many arguments"
  exit 1
fi

if (( \${#} == 0 )) || [[ -z "\${1:-}" ]]; then
  ${args__print_error} "${args__root}: missing or empty argument"
  exit 1
fi

local ${args__arg_name:?Missing arg name.}="\${1}"
shift
EOF
      ;;
    *)
      print_error "${args__root}: invalid extra args type: ${args__extra_args}"
      exit 1
      ;;
  esac
}

args::print_process() {
  local args__is_processing=no
  local args__indent="${1:-2}"

  printf "%${args__indent}s# start of generated bash args '%s'\n\n" ' ' "${args__root}"
  args::process | utils::prepend_output "$(printf "%${args__indent}s" ' ')"
  printf "\n%${args__indent}s# end of generated bash args '%s'\n" ' ' "${args__root}"
}
