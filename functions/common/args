#!/usr/bin/env bash

include_header common/args

args::init_subcommand() {
  local name="${1:?Missing root argument.}"
  local description="${2:?Missing description argument.}"

  cat - <<EOF
  local args__root="${name}"
  local args__root_description="${description}"
  declare -A args__options
  declare -A args__option_blocks
  declare -A args__option_descriptions
  declare -A args__option_flags
  declare -A args__commands
  declare -A args__command_blocks
  declare -A args__command_descriptions
EOF
}

args::new_option() {
  local name="${1:?Missing name argument.}"
  local flag="${2}"
  local description="${3:?Missing description argument.}"
  local block="${4:?Missing block argument.}"

  args__options[${name}]="${name}"
  args__option_flags[${name}]="${flag}"
  args__option_descriptions[${name}]="${description}"
  args__option_blocks[${name}]="${block}"
}

args::new_command() {
  local name="${1:?Missing name argument.}"
  local description="${2:?Missing description argument.}"
  local block="${3:?Missing block argument.}"

  args__commands[${name}]="${name}"
  args__command_descriptions[${name}]="${description}"
  args__command_blocks[${name}]="${block}"
}

args::process_options() {
  cat - <<EOF
  while true; do
    case "\${1}" in
EOF

  if (( ${#args__options[@]} != 0 )); then
    local name
    for name in "${!args__options[@]}"; do
      cat - <<EOF
      --${name})
        shift
        ${args__option_blocks[${name}]}
        ;;
EOF
    done
  fi

  cat - <<EOF
      --help|-h|'')
        args::print_help
        exit 0
        ;;
      *)
        if [[ -z "\${1##-*}" ]]; then
          print_error "\${args__root}: unknown flag: \${1}"
          return 1
        fi

        break
        ;;
    esac
  done
EOF
}

args::process_command() {
  cat - <<EOF
  local args__cmd="\${1}"
  shift || :

  case "\${args__cmd}" in
EOF

  if (( ${#args__commands[@]} != 0 )); then
    local name
    for name in "${!args__commands[@]}"; do
      cat - <<EOF
    ${name})
      ${args__command_blocks[${name}]}
      ;;
EOF
    done
  fi

  cat - <<EOF
    *)
      print_error "${args__root}: unknown command: \${@}"
      exit 1
      ;;      
  esac
EOF
}

args::process_subcommand() {
  echo 'eval "$(args::process_options)"'
  echo 'eval "$(args::process_command)"'
}

args::print_help() {
  echo
  echo "Usage: ${args__root} COMMAND"
  echo
  echo "${args__root_description}"

  local options_width command_width justify_width
  options_width=$(( $(utils::array_key_max_width "args__options") + 6 ))
  command_width=$(utils::array_key_max_width "args__commands")

  if (( ${options_width} > ${command_width} )); then
    justify_width=${options_width}
  else
    justify_width=${command_width}
  fi


  if (( ${#args__options[@]} != 0 )); then
    echo
    echo "Options:"

    local name justified_name
    for name in "${!args__options[@]}"; do
      justified_name=$(utils::justify_string "$(( ${justify_width} - 6 ))" "${name}")

      if [[ -n "${args__option_flags[${name}]}" ]]; then
        justified_name="-${args__option_flags[${name}]}, --${justified_name}"
      else
        justified_name="    --${justified_name}"
      fi

      echo "  ${justified_name}   ${args__option_descriptions[${name}]}"
    done
  fi

  if (( ${#args__commands[@]} != 0 )); then
    echo
    echo "Commands:"

    local name
    for name in "${!args__commands[@]}"; do
      echo "  $(utils::justify_string "${justify_width}" "${name}")   ${args__command_descriptions[${name}]}"
    done
  fi

  echo
  echo "Run '${args__root} COMMAND --help' for more information on a command."
}
