#!/usr/bin/env bash

rdo_header docker.context

DOCKER_CONTEXT_TYPES=(
  ancestor
  autogen
  compile
  empty
)

rdo_docker_context() {
  local cmd="${1}"; shift || :

  case "${cmd}" in
    build)
      rdo_docker_context_build "${@}"
      ;;
    clean)
      rdo_docker_context_clean "${@}"
      ;;
    types)
      rdo_docker_context_types "${@}"
      ;;
    --help|-h|'')
      echo "Usage: rdo docker context COMMAND"
      echo
      echo "Docker context commands"
      echo
      echo "Commands"
      echo "  clean     Clean all context types"
      echo "  build     Build image in context"
      echo "  types   List all build types"
      echo
      echo "Run 'rdo docker context COMMAND --help' for more information on a command."
      ;;
    *)
      print_error "rdo docker context: unknown command: ${cmd}"
      return 1
      ;;
  esac
}

rdo_docker_context_build() {
  local context_build_args=()

  local arg_context_args=
  local arg_context_name=
  local arg_context_type=

  while [[ -n "${1}" ]]; do
    case "${1}" in
      --cache)
        context_build_args+=(--post-exec "rdo_docker_context__post_cache")
        shift ;;
      --context-args)
        arg_context_args="${2:?Missing context args argument.}"
        shift 2 ;;
      --context-name)
        arg_context_name="${2:?Missing context name argument.}"
        shift 2 ;;
      --context-type)
        arg_context_type="${2:?Missing context type argument.}"
        shift 2 ;;
      --empty)
        arg_context_type="empty"
        shift ;;
      --help|-h)
        echo "Usage: rdo docker context build [OPTIONS]"
        echo
        echo "Build docker container with a custom context"
        echo
        echo "Options:"
        echo "      --cache         Empty context"
        echo "      --context-args  Args of the context"
        echo "      --context-name  Name of the context"
        echo "      --context-type  Type of the context"
        echo "      --empty         Build in an empty context"
        echo
        echo "Run 'rdo env create --help' for more information on a command."
        exit 1
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ -z "${arg_context_type}" ]]; then
    print_error "rdo docker context build: missing context type argument"
    exit 1
  fi

  if [[ " autogen empty " =~ " ${arg_context_type} " ]]; then
    arg_context_name="${arg_context_type}"
  fi

  if [[ -z "${arg_context_name}" ]]; then
    print_error "rdo docker context build: missing context name argument"
    exit 1
  fi

  if ! [[ " ${DOCKER_CONTEXT_TYPES[*]} " =~ " ${arg_context_type} " ]]; then
    print_error "rdo docker context build: unknown context type: '${arg_context_type}'"
    exit 1
  fi

  if declare -f rdo_docker_context__path_${arg_context_type} &> /dev/null; then
    context_build_args+=(--context "./context/$(rdo_docker_context__path_${arg_context_type} "${arg_context_name}")")
  else
    context_build_args+=(--context "./context/${arg_context_name}")
  fi

  if declare -f rdo_docker_context__test_${arg_context_type} &> /dev/null; then
    context_build_args+=("--test-exec" "rdo_docker_context__test_${arg_context_type} ${arg_context_name} ${arg_context_args}")
  fi

  if declare -f rdo_docker_context__pre_${arg_context_type} &> /dev/null; then
    context_build_args+=("--pre-exec" "rdo_docker_context__pre_${arg_context_type} ${arg_context_name} ${arg_context_args}")
  fi

  if declare -f rdo_docker_context__post_${arg_context_type} &> /dev/null; then
    context_build_args+=("--post-exec" "rdo_docker_context__post_${arg_context_type} ${arg_context_name} ${arg_context_args}")
  fi

  if [[ " autogen configure compile " =~ " ${arg_context_type} " ]]; then
    context_build_args+=(--build-arg "CONTEXT_TYPE=${arg_context_type}")
    context_build_args+=(--build-arg "CONTEXT_NAME=${arg_context_name}")
  fi

  rdo_docker_build "${context_build_args[@]}" "${@}"
}

rdo_docker_context_clean() {
  local project_path
  project_path="$(get_project_path)"

  if [[ -z "${project_path}" ]]; then
    print_error "rdo docker context clean: could not get project path"
    exit 1
  fi

  rm -rf "./context"
}

rdo_docker_context_types() {
  printf "%s\n" "${DOCKER_CONTEXT_TYPES[@]}"
}

# Helper functions

rdo_docker_context__pre_ancestor() {
  local project_path
  project_path="$(get_project_path)"
  local context_name="${1:?Missing ancestor name argument.}"
  local context_path="${project_path:?Missing project path.}/context/${context_name}"
  local tag_full="${2:?Missing tag argument.}"

  rm -r "${context_path}/bin" 2> /dev/null || :
  mkdir -p "${context_path}/bin"

  cp "${project_path}"/misc/{build,pkg,rdo,rsync,stat}-*[!~] "${context_path}/bin/"
}

rdo_docker_context__path_autogen() {
  rdo_docker_context__path_compile "${@}"
}

rdo_docker_context__test_autogen() {
  local context_name="${1:?Missing context name argument.}"
  local tag_full="${2:?Missing tag argument.}"

  # [[ -z "$(rdo__image_id__name "${tag_full}")" ]] ||
  #   [[ "$(rdo__image_label_value__tag__label "${tag_full}" "rdo__stage__${context_name}")" != "yes" ]]
  :
}

rdo_docker_context__pre_autogen() {
  local project_path
  project_path="$(get_project_path)"
  local context_path="${project_path:?Missing project path.}/context/compile"

  "${project_path}/misc/rsync-stage-compile" "${project_path}/data/libtorrent/" "${context_path}/libtorrent/"
  "${project_path}/misc/rsync-stage-compile" "${project_path}/data/rtorrent/" "${context_path}/rtorrent/"

  local tar_c_cmd
  tar_c_cmd="$(rdo__tar_c_cmd)"

  eval ${tar_c_cmd} "${context_path}/libtorrent.tar.gz" --directory "${context_path}/libtorrent" .
  eval ${tar_c_cmd} "${context_path}/rtorrent.tar.gz" --directory "${context_path}/rtorrent" .

  echo "pre-autogen: libtorrent md5 $(md5sum "${context_path}/libtorrent.tar.gz")"
  echo "pre-autogen:   rtorrent md5 $(md5sum "${context_path}/rtorrent.tar.gz")"
}

rdo_docker_context__post_cache() {
  rdo_docker_context_build --empty --cache-base-tag "${tag_full}" --filename "cache" "cache/apk:global"
}

rdo_docker_context__path_compile() {
  echo "compile"
}

rdo_docker_context__pre_compile() {
  local project_path
  project_path="$(get_project_path)"
  local context_name="${1:?Missing context name argument.}"
  local context_path="${project_path:?Missing project path.}/context"

  mkdir -p "${context_path}/compile/${context_name}"
  "${project_path}/misc/rsync-stage-compile" "${project_path}/data/${context_name}/" "${context_path}/compile/${context_name}/"
}

rdo_docker_context__pre_empty() {
  local project_path
  project_path="$(get_project_path)"

  mkdir -p "${project_path:?Missing project path.}/context/empty/"
}
