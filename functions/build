#!/usr/bin/env bash

include_header build

rdo_build() {
  local arg_repository="${RDO_REPOSITORY:?Not in rdo bash session.}"
  local arg_tag_append=

  eval "$(args::init_subcommand "rdo build" "Build project.")"

  args::new_option "compiler" string "c" "Select the compiler to use" \
                   'local build_args=()' 'build_args+=("--build-arg" "COMPILER=${args__1}")'
  args::new_option "dry-run" empty "" "Do not actually build the container" \
                   '' 'build_args+=("--dry-run")'
  args::new_option "rebuild" empty "" "Rebuild all base images" \
                   'local arg_rebuild=' 'build_args+=("--rebuild"); arg_rebuild="yes"'

  args::new_command "all" empty "Build all" \
                    'rdo_build_all'
  args::new_command "clean" empty "Clean all build images" \
                    'rdo_build_clean'
  args::new_command "init" empty "Build all init images" \
                    'rdo_build_init'

  eval "$(args::process)"
}

rdo_build_all() {
  rdo_init verify
  rdo_build_init

  rdo_build__build --context-type "rtorrent" --context-name "rtorrent" --filename "build.new" --build-arg "IGNORE_BUILD_ERROR=no" "build/rtorrent"
  rdo_build__build --context-type "run" --context-name "rtorrent" "run/rtorrent"
}

rdo_build_clean() {
  rdo_init verify
  rdo_docker_clean build
}

rdo_build_init() {
  rdo docker pull "docker/dockerfile:experimental" "alpine:latest"

  rdo_build__build --context-type "ancestor" --no-rebuild --filename "ancestor" --ancestor-project "pkg-cache" --build-arg "CACHE_IMAGE=alpine" "ancestor/cache:global"
  rdo_build__build --empty --no-rebuild "cache/apk:global"

  rdo_build__build --context-type "ancestor" --cache --no-rebuild --filename "ancestor" --ancestor-project "build" "ancestor/build:global"
  rdo_build__build --context-type "ancestor" --cache --no-rebuild --filename "ancestor" --ancestor-project "run" "ancestor/run:global"
  rdo_build__build --context-type "ancestor" --cache --no-rebuild --filename "ancestor" --ancestor-project "utils" "ancestor/utils:global"

  rdo_build__build --empty --no-rebuild "stage:global"
  rdo_build__build --empty --cache "base/build/compiler"
  rdo_build__build --empty --cache "base/build/rtorrent"
  rdo_build__build --empty "base/run/rtorrent"

  rdo_build__build --context-type "autogen" --filename "build.autogen" "build/rtorrent"

  rdo_build__build --context-type "run" --context-name "opentracker" --no-rebuild "run/opentracker:global"
  rdo_build__build --context-type "run" --context-name "dns"         --no-rebuild "run/dns:global"
  rdo_build__build --context-type "run" --context-name "router"      --no-rebuild "run/router:global"
}

rdo_build_libtorrent_dev() {
  rdo_init verify

  local image_tag="${arg_repository}/build/libtorrent-stage:default"
  local container_name="rdo-build-libtorrent"

  if [[ "${arg_rebuild}" == "yes" ]] || [[ -z "$(rdo__running_container_id__name "${container_name}")" ]]; then
    rdo_build_init
    rdo_build__libtorrent
    print_space
    rdo run init --rebuild "${image_tag}" "${container_name}"
    print_space
  fi

  docker exec "${container_name}" build-all libtorrent
}

rdo_build_rtorrent_dev() {
  rdo_init verify

  local image_tag="${arg_repository}/build/rtorrent-stage:default"
  local container_name="rdo-build-rtorrent"

  if [[ "${arg_rebuild}" == "yes" ]] || [[ -z "$(rdo__container_id__name "${container_name}")" ]]; then
    rdo_build_init
    rdo_build__libtorrent
    rdo_build__rtorrent
    print_space
    rdo run init --rebuild "${image_tag}" "${container_name}"
    print_space
  fi

  docker exec "${container_name}" build-all rtorrent
}

# Helper functions

rdo_build__build() {
  local build_all_args=("${@}")
  local build_option_args=("${build_all_args[@]:0:${#@}-1}")
  local build_tag="${build_all_args[-1]}"

  if [[ -z "${arg_tag_append}" ]] && [[ ! "${build_tag}" =~ : ]]; then
    build_option_args+=("--tag-append" "default")
  fi

  rdo docker context build "${build_option_args[@]}" "${build_args[@]}" "${build_tag}"
}
