#!/usr/bin/env bash

include_header build

rdo_build() {
  local arg_repository="${RDO_REPOSITORY:?Not in rdo bash session.}"
  local arg_tag_append=

  # eval "$(args::init_subcommand "rdo build" "Build project.")"

  # args::new_option "compiler" string "c" "Select the compiler to use" \
  #                  'local build_args=()' 'build_args+=("--build-arg" "COMPILER=${args__1}")'
  # args::new_option "dry-run" empty "" "Do not actually build the container" \
  #                  '' 'build_args+=("--dry-run")'
  # args::new_option "rebuild" empty "" "Rebuild all base images" \
  #                  'local arg_rebuild=' 'build_args+=("--rebuild"); arg_rebuild="yes"'

  # args::new_command "all" empty "Build all" \
  #                   'rdo_build_all'
  # args::new_command "clean" empty "Clean all build images" \
  #                   'rdo_build_clean'
  # args::new_command "init" empty "Build all init images" \
  #                   'rdo_build_init'

  # eval "$(args::process)"

  # start of generated bash args 'rdo build'

  local build_args=()
  local arg_rebuild=

  while true; do
    case "${1}" in
      --compiler|-c)
        local args__1="${2:?Missing argument for '${1}'.}"
        shift 2
        build_args+=("--build-arg" "COMPILER=${args__1}")
        ;;
      --dry-run)
        shift
        build_args+=("--dry-run")
        ;;
      --rebuild)
        shift
        build_args+=("--rebuild"); arg_rebuild="yes"
        ;;
      --help|-h|'')
        echo "Usage: rdo build"
        echo
        echo "Build project."
        echo
        echo "Options:"
        echo "  -c, --compiler   Select the compiler to use"
        echo "      --dry-run    Do not actually build the container"
        echo "      --rebuild    Rebuild all base images"
        echo
        echo "Commands:"
        echo "  all              Build all"
        echo "  clean            Clean all build images"
        echo "  init             Build all init images"
        echo
        echo "Run 'rdo build COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  local args__root="rdo build"
  local args__cmd="${1}"
  shift || :

  case "${args__cmd}" in
    all)
      args::verify_command_empty "${@}"
      rdo_build_all
      ;;
    clean)
      args::verify_command_empty "${@}"
      rdo_build_clean
      ;;
    init)
      args::verify_command_empty "${@}"
      rdo_build_init
      ;;
    *)
      print_error "rdo build: unknown command: ${args__cmd}"
      exit 1
      ;;
  esac

  # end of generated bash args 'rdo build'
}

rdo_build_all() {
  rdo_init verify
  rdo_build_init

  rdo_build__build --empty --filename "build.rtorrent.alpine" --target "compiler" "build/rtorrent/compiler"
  rdo_build__build --empty --filename "build.rtorrent.alpine" --target "run"      "build/rtorrent/run"

  rdo_build__build --context-type "rtorrent" --context-name "rtorrent" --filename "build.new" "run/rtorrent"
}

rdo_build_clean() {
  rdo_init verify
  rdo_docker_clean build
}

rdo_build_init() {
  rdo docker pull "docker/dockerfile:experimental" "alpine:latest"

  # Test build:
  rdo_docker_build --filename "entrypoint" --context "./entrypoint" "build/entrypoint:global"

  # rdo_build__build --ancestor --no-rebuild --filename "ancestor" --ancestor-project "build"                            "ancestor/build:global"
  # rdo_build__build --ancestor --no-rebuild --filename "ancestor" --ancestor-project "run"                              "ancestor/run:global"
  # rdo_build__build --ancestor --no-rebuild --filename "ancestor" --ancestor-project "utils"                            "ancestor/utils:global"
  # rdo_build__build --ancestor --no-rebuild --filename "ancestor" --ancestor-project "utils" --base-image "alpine:3.11" "ancestor/utils:alpine-3.11"

  # rdo_build__build --empty --no-rebuild "stage:global"

  # rdo_build__build --context-type "run" --context-name "opentracker" --no-rebuild "run/opentracker:global"
  # rdo_build__build --context-type "run" --context-name "router"      --no-rebuild "run/router:global"
  # rdo_build__build --context-type "run" --context-name "dns"         --no-rebuild "run/dns:global"

  rdo_build__build --context-type "run" --context-name "dns"         "run/dns:global"

}

# Helper functions

rdo_build__build() {
  local build_all_args=("${@}")
  local build_option_args=("${build_all_args[@]:0:${#@}-1}")
  local build_tag="${build_all_args[-1]}"

  if [[ -z "${arg_tag_append}" ]] && [[ ! "${build_tag}" =~ : ]]; then
    build_option_args+=("--tag-append" "default")
  fi

  rdo docker context build "${build_option_args[@]}" "${build_args[@]}" "${build_tag}"
}
