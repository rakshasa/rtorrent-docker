#!/usr/bin/env bash

include_header build

rdo_build() {
  local arg_repository="${RDO_REPOSITORY:?Not in rdo bash session.}"
  local arg_tag_append=

  eval "$(args::init_subcommand "rdo build" "Build project.")"

  args::new_option "compiler" string "c" "Select the compiler to use" \
                   'local global_build_args=()' 'global_build_args+=("--build-arg" "COMPILER=${args__1}")'
  args::new_option "dry-run" empty "" "Do not actually build the container" \
                   '' 'global_build_args+=("--dry-run")'
  args::new_option "rebuild" empty "" "Rebuild all base images" \
                   'local arg_rebuild=' 'global_build_args+=("--rebuild"); arg_rebuild="yes"'

  args::new_command "all" empty "Build all" \
                    'rdo_build_all'
  args::new_command "clean" empty "Clean all build images" \
                    'rdo_build_clean'
  args::new_command "init" empty "Build all init images" \
                    'rdo_build_init'
  args::new_command "compile" empty "Compile rtorrent images" \
                    'rdo_build_compile'

  args::new_command "variant" default "Compile rtorrent variant images" \
                    'rdo_build_variant "${@}"'

  args::new_command "test-libtorrent" empty "Create an container ready to test libtorrent" \
                    'rdo_build_test_libtorrent'
  args::new_command "test-update-libtorrent" empty "Update source files in libtorrent test container" \
                    'rdo_build_test_update_libtorrent'

  eval "$(args::process)"
}

rdo_build_all() {
  rdo_init verify
  rdo_build_init
  rdo_build_compile
}

rdo_build_clean() {
  rdo_init verify
  rdo_docker_clean build
}

rdo_build_init() {
  rdo docker pull "docker/dockerfile:experimental"

  rdo_docker_build --filename "entrypoint" --context "./entrypoint" "build/entrypoint:global"

  rdo_build__context__ancestor --no-rebuild --filename "ancestor" --ancestor-project "build" --base-image "alpine:3.20" "ancestor/build:alpine-3"
  rdo_build__context__ancestor --no-rebuild --filename "ancestor" --ancestor-project "run"   --base-image "alpine:3.20" "ancestor/run:alpine-3"
  rdo_build__context__ancestor --no-rebuild --filename "ancestor" --ancestor-project "utils" --base-image "alpine:3.20" "ancestor/utils:alpine-3"

  rdo_build__context__ancestor --no-rebuild --filename "ancestor" --ancestor-project "build" --base-image "ubuntu:20.04" "ancestor/build:ubuntu-20.04"
  rdo_build__context__ancestor --no-rebuild --filename "ancestor" --ancestor-project "run"   --base-image "ubuntu:20.04" "ancestor/run:ubuntu-20.04"
  rdo_build__context__ancestor --no-rebuild --filename "ancestor" --ancestor-project "build" --base-image "ubuntu:22.04" "ancestor/build:ubuntu-22.04"
  rdo_build__context__ancestor --no-rebuild --filename "ancestor" --ancestor-project "run"   --base-image "ubuntu:22.04" "ancestor/run:ubuntu-22.04"
  # rdo_build__context__ancestor --no-rebuild --filename "ancestor" --ancestor-project "build" --base-image "ubuntu:24.04" "ancestor/build:ubuntu-24.04"
  # rdo_build__context__ancestor --no-rebuild --filename "ancestor" --ancestor-project "run"   --base-image "ubuntu:24.04" "ancestor/run:ubuntu-24.04"

  rdo_build__context__empty --no-rebuild "stage:global"

  rdo_build__context__run "dns"         --no-rebuild "run/dns:global"
  rdo_build__context__run "opentracker" --no-rebuild "run/opentracker:global"
  rdo_build__context__run "router"      --no-rebuild "run/router:global"

  rdo_build__context__empty --no-rebuild --ancestor-project "utils" "run/mktorrent:global"
}

rdo_build_compile() {
  rdo_init verify

  rdo_build__context__empty --filename "build.rtorrent.alpine" --target "compiler"     "build/rtorrent/compiler:alpine-3"
  rdo_build__context__empty --filename "build.rtorrent.alpine" --target "run"          "build/rtorrent/run:alpine-3"
  rdo_build__context__rtorrent --filename "build.rtorrent"     --tag-append "alpine-3" "run/rtorrent:alpine-3"

  # rdo_build__context__empty --filename "build.rtorrent.ubuntu-20.04" --target "compiler"         "build/rtorrent/compiler:ubuntu-20.04"
  # rdo_build__context__empty --filename "build.rtorrent.ubuntu-20.04" --target "run"              "build/rtorrent/run:ubuntu-20.04"
  # rdo_build__context__rtorrent --filename "build.rtorrent"           --tag-append "ubuntu-20.04" "run/rtorrent:ubuntu-20.04"

  # rdo_build__context__empty --filename "build.rtorrent.ubuntu-24.04" --target "compiler" "build/rtorrent/compiler:ubuntu-24.04"
  # rdo_build__context__empty --filename "build.rtorrent.ubuntu-24.04" --target "run"      "build/rtorrent/run:ubuntu-24.04"
  # rdo_build__build --context-type "rtorrent" --context-name "rtorrent" --filename "build.rtorrent" --tag-append "ubuntu-24.04" "run/rtorrent"

  docker image tag "rdo/run/rtorrent:alpine-3" "rdo/run/rtorrent:default"
  # docker image tag "rdo/run/rtorrent:ubuntu-24.04" "rdo/run/rtorrent:default"
}

rdo_build_variant() {
  rdo_init verify

  while [[ "${#}" > 0 ]]; do
    local variant="${1}"
    shift

    # tag-append is automatically added to the __rtorrent build context, so we can remove it

    case "${variant}" in
      "alpine-3")
        rdo_build__context__empty --filename "build.rtorrent.alpine" --target "compiler"       "build/rtorrent/compiler:${variant}"
        rdo_build__context__empty --filename "build.rtorrent.alpine" --target "run"            "build/rtorrent/run:${variant}"
        rdo_build__context__rtorrent --filename "build.rtorrent"     --tag-append "${variant}" "run/rtorrent:${variant}"
        ;;
      "alpine-3-lua")
        rdo_build__context__empty    --filename "build.rtorrent.alpine" --target "compiler"       --build-arg "ADD_PACKAGES=lua5.3-dev"  "build/rtorrent/compiler:${variant}"
        rdo_build__context__empty    --filename "build.rtorrent.alpine" --target "run"            --build-arg "ADD_PACKAGES=lua5.3"      "build/rtorrent/run:${variant}"
        rdo_build__context__rtorrent --filename "build.rtorrent"        --tag-append "${variant}" --build-arg "RTORRENT_ARGS=--with-lua" "run/rtorrent:${variant}"
        ;;
      "alpine-3-tinyxml2")
        rdo_build__context__empty --filename "build.rtorrent.alpine" --target "compiler"       "build/rtorrent/compiler:${variant}"
        rdo_build__context__empty --filename "build.rtorrent.alpine" --target "run"            "build/rtorrent/run:${variant}"
        rdo_build__context__rtorrent --filename "build.rtorrent"     --tag-append "${variant}" --build-arg "RTORRENT_ARGS=--with-xmlrpc-tinyxml2" "run/rtorrent:${variant}"
        ;;
      "alpine-3-xmlrpc-c")
        rdo_build__context__empty    --filename "build.rtorrent.alpine" --target "compiler"       --build-arg "ADD_PACKAGES=xmlrpc-c-dev"     "build/rtorrent/compiler:${variant}"
        rdo_build__context__empty    --filename "build.rtorrent.alpine" --target "run"            --build-arg "ADD_PACKAGES=xmlrpc-c"         "build/rtorrent/run:${variant}"
        rdo_build__context__rtorrent --filename "build.rtorrent"        --tag-append "${variant}" --build-arg "RTORRENT_ARGS=--with-xmlrpc-c" "run/rtorrent:${variant}"
        ;;
      "alpine-3-lua-xmlrpc-c")
        rdo_build__context__empty    --filename "build.rtorrent.alpine" --target "compiler"       --build-arg "ADD_PACKAGES=lua5.3-dev xmlrpc-c-dev"     "build/rtorrent/compiler:${variant}"
        rdo_build__context__empty    --filename "build.rtorrent.alpine" --target "run"            --build-arg "ADD_PACKAGES=lua5.3 xmlrpc-c"             "build/rtorrent/run:${variant}"
        rdo_build__context__rtorrent --filename "build.rtorrent"        --tag-append "${variant}" --build-arg "RTORRENT_ARGS=--with-xmlrpc-c --with-lua" "run/rtorrent:${variant}"
        ;;
      "ubuntu-20.04")
        rdo_build__context__empty    --filename "build.rtorrent.ubuntu" --target "compiler"       --build-arg "DISTRO_VERSION=${variant}" "build/rtorrent/compiler:${variant}"
        rdo_build__context__empty    --filename "build.rtorrent.ubuntu" --target "run"            --build-arg "DISTRO_VERSION=${variant}" "build/rtorrent/run:${variant}"
        rdo_build__context__rtorrent --filename "build.rtorrent"        --tag-append "${variant}"                                         "run/rtorrent:${variant}"
        ;;
      "ubuntu-22.04")
        rdo_build__context__empty    --filename "build.rtorrent.ubuntu" --target "compiler"       --build-arg "DISTRO_VERSION=${variant}" "build/rtorrent/compiler:${variant}"
        rdo_build__context__empty    --filename "build.rtorrent.ubuntu" --target "run"            --build-arg "DISTRO_VERSION=${variant}" "build/rtorrent/run:${variant}"
        rdo_build__context__rtorrent --filename "build.rtorrent"        --tag-append "${variant}"                                         "run/rtorrent:${variant}"
        ;;
      *)
        echo "Unknown variant: ${variant}"
        return 1
        ;;
    esac
  done
}

rdo_build_test_libtorrent() {
  rdo_build_compile

  rdo_build__context__rtorrent --filename "build.rtorrent" --target "compile.libtorrent" --tag-append "alpine-3" "test/libtorrent:alpine-3"

  docker rm -f rdo-test-libtorrent || :
  docker run \
    -it \
    --detach \
    --name rdo-test-libtorrent \
    --mount "type=bind,source=${RDO_PATH}/,target=/rdo/" \
    rdo/test/libtorrent:alpine-3 \
    tail -f /dev/null

  docker exec -it rdo-test-libtorrent bash -c '
    set -x &&

    # Move some to dockerfiles
    apk add emacs git

    cat /env.configure &&
    source /env.configure &&

    /build/libtorrent/source/configure \
      --prefix=/prefix \
      INSTALL="/usr/bin/install -C" \
      --enable-debug \
      --enable-extra-debug \
      --disable-execinfo \
      --disable-pthread-setname-np &&

    make -j12 &&
    make -j12 install &&
    make -j12 check

    sed -i -e "s|exec \"\$progdir/\$program\"|exec gdb --args \"\$progdir/\$program\"|" ./test/LibTorrent_Test ./test/LibTorrent_Test_{Data,Net,Torrent,Torrent_Utils,Tracker}

    git config --global user.email sundell.software@gmail.com
    git config --global user.name "Jari Petter Sundell"

    set +x
    echo
    echo "*** ready to run unit tests ***"
    echo
    echo "to add logging to a test, inherit from test_fixture and add to setUp():"
    echo "  log_add_group_output(torrent::LOG_FOO, \"test_output\");"
    echo
    echo "example of running subsets of tests:"
    echo
    echo "docker exec -it rdo-test-libtorrent bash -c \"(export TEST_NAME=\\\"torrent::tracker_list\\\"; ./test/LibTorrent_Test_Torrent)\""
    echo'
}

rdo_build_test_update_libtorrent() {
  ./misc/rsync-stage-compile ./data/libtorrent/ ./context/rtorrent/libtorrent/

  rdo__call_tar_cf ./context/rtorrent/libtorrent.tar.gz \
    --directory ./context/rtorrent/libtorrent \
    .

  docker cp ./context/rtorrent/libtorrent.tar.gz rdo-test-libtorrent:/stage/

  docker exec -it rdo-test-libtorrent bash -c '
    set -x &&

    rm -rf /stage/libtorrent/source &&
    mkdir -p /stage/libtorrent/source &&

    tar -xf /stage/libtorrent.tar.gz \
      --warning=no-unknown-keyword \
      --format pax \
      --sort=name \
      --directory /stage/libtorrent/source \
      --wildcards "*.am" \
      --wildcards "*.m4" \
      --wildcards "*.pc.in" \
      --wildcards "*.cc" \
      --wildcards "*.h" \
      --no-wildcards "./configure.ac" &&

    rdo-find-move /stage/libtorrent/source /build/libtorrent/source \
      "( \
         -not -type d \
      )" &&

    cd /build/libtorrent/output &&

    make -j12 &&
    make -j12 check TESTS=
'
}

rdo_build_test_debug_libtorrent() {
  docker exec -it rdo-test-libtorrent bash -c '
    sed -i -e "s|exec \"\$progdir/\$program\"|exec gdb --args \"\$progdir/\$program\"|" ./test/LibTorrent_Test ./test/LibTorrent_Test_{Data,Net,Torrent,Torrent_Utils,Tracker}
'
}

# Helper functions

rdo_build__build() {
  local build_all_args=("${@}")
  local build_option_args=("${build_all_args[@]:0:${#@}-1}")
  local build_tag="${build_all_args[-1]}"

  rdo docker context build "${build_option_args[@]}" "${global_build_args[@]}" "${build_tag}"
}
