#!/usr/bin/env bash

include_header build

rdo_build() {
  local build_args=()
  local arg_repository="${RDO_REPOSITORY:?Not in rdo bash session.}"
  local arg_rebuild=
  local arg_tag_append=

  eval "$(args::init_subcommand "rdo build" "Build project.")"

  args::new_option "compiler" string "c" "Select the compiler to use" \
                   'build_args+=("--build-arg" "COMPILER=${args__1}")'
  args::new_option "dry-run" empty "" "Do not actually build the container" \
                   'build_args+=("--dry-run")'
  args::new_option "rebuild" empty "" "Rebuild all base images" \
                   'build_args+=("--rebuild"); arg_rebuild="yes"'

  args::new_command "all" empty "Build all" \
                    'rdo_build_all "${@}"'
  args::new_command "check" empty "Build check" \
                    'rdo_build_check "${@}"'
  args::new_command "compile" empty "Build compile" \
                    'rdo_build_compile "${@}"'

  args::new_command "libtorrent" empty "Build libtorrent" \
                    'rdo_build__libtorrent "${@}"'
  args::new_command "libtorrent-compile" empty "Build libtorrent-compile" \
                    'rdo_build__libtorrent_compile "${@}"'
  args::new_command "libtorrent-dev" empty "Build libtorrent-dev" \
                    'rdo_build_libtorrent_dev "${@}"'
  args::new_command "rtorrent" empty "Build rtorrent" \
                    'rdo_build__rtorrent "${@}"'
  args::new_command "rtorrent-compile" empty "Build rtorrent-compile" \
                    'rdo_build__rtorrent_compile "${@}"'
  args::new_command "rtorrent-dev" empty "Build rtorrent-dev" \
                    'rdo_build_rtorrent_dev "${@}"'

  args::new_command "mktorrent" empty "Build mktorrent" \
                    'rdo_build_mktorrent "${@}"'

  eval "$(args::process)"
}

rdo_build_all() {
  rdo init verify
  rdo_build__init
  rdo_build__libtorrent_configure
  rdo_build__libtorrent_compile
  rdo_build__rtorrent_configure
  rdo_build__rtorrent_compile
  rdo_build__rtorrent_run
}

rdo_build_check() {
  rdo init verify
  rdo_build__libtorrent_check "${@}"
  rdo_build__rtorrent_check "${@}"
}

rdo_build_compile() {
  rdo init verify
  rdo_build__libtorrent_compile "${@}"
  rdo_build__rtorrent_compile "${@}"
  rdo_build__rtorrent_run
}

rdo_build_libtorrent_dev() {
  rdo init verify

  local image_tag="${arg_repository}/build/libtorrent-stage:default"
  local container_name="rdo-build-libtorrent"

  if [[ "${arg_rebuild}" == "yes" ]] || [[ -z "$(rdo__running_container_id__name "${container_name}")" ]]; then
    rdo_build__init
    rdo_build__libtorrent_configure
    print_space
    rdo run init --rebuild "${image_tag}" "${container_name}"
    print_space
  fi

  docker exec "${container_name}" build-all libtorrent
}

rdo_build_rtorrent_dev() {
  rdo init verify

  local image_tag="${arg_repository}/build/rtorrent-stage:default"
  local container_name="rdo-build-rtorrent"

  if [[ "${arg_rebuild}" == "yes" ]] || [[ -z "$(rdo__container_id__name "${container_name}")" ]]; then
    rdo_build__init
    rdo_build__libtorrent_configure
    rdo_build__libtorrent_compile
    rdo_build__rtorrent_configure
    print_space
    rdo run init --rebuild "${image_tag}" "${container_name}"
    print_space
  fi

  docker exec "${container_name}" build-all rtorrent
}

rdo_build_mktorrent() {
  rdo_build__build --empty --cache --no-rebuild --ancestor-project "rdo-utils" "run/mktorrent:global"
}

# Helper functions

rdo_build__build() {
  local build_all_args=("${@}")
  local build_option_args=("${build_all_args[@]:0:${#@}-1}")
  local build_tag="${build_all_args[-1]}"

  if [[ -z "${arg_tag_append}" ]] && [[ ! "${build_tag}" =~ : ]]; then
    build_option_args+=("--tag-append" "default")
  fi

  rdo docker context build "${build_option_args[@]}" "${build_args[@]}" "${build_tag}"
}

rdo_build__compile_status() {
  local context_name="${1:?Missing context name argument.}"
  local image_tag="${arg_repository}/${2:?Missing image tag argument.}"

  if [[ ! "${build_tag}" =~ : ]]; then
    image_tag+=":default"
  fi

  local file_prefix="/deploy/${context_name}/output/status"

  if rdo__image_has_file "${image_tag}" "${file_prefix}.success"; then
    echo "success"
  elif rdo__image_has_file "${image_tag}" "${file_prefix}.failure"; then
    echo "failure"
  else
    print_error "could not get compile status for ${image_tag}"
    return 1
  fi
}

rdo_build__check_compile() {
  local context_name="${1:?Missing context name argument.}"

  if [[ "$(rdo_build__compile_status "libtorrent" "build/rtorrent")" == "success" ]]; then
    print_progress "compile success"
  else
    print_warning "compile failed"
    return 1
  fi
}

rdo_build__init() {
  rdo docker pull "docker/dockerfile:experimental" "alpine:latest"

  rdo_build__build --context-type "ancestor" --context-name "ancestor" --no-rebuild --ancestor-project "rdo-pkg-cache" "ancestor/cache:global"
  rdo_build__build --empty --no-rebuild "cache/apk:global"

  rdo_build__build --context-type "ancestor" --context-name "ancestor" --cache --no-rebuild --ancestor-project "rdo-project" "ancestor:global"
  rdo_build__build --empty --no-rebuild "stage:global"
  rdo_build__build --empty --cache "base/build/compiler"
  rdo_build__build --empty --cache "base/build/rtorrent"
  rdo_build__build --empty "base/run/rtorrent"

  rdo_build__build --context-type "autogen" --filename "build.autogen" "build/rtorrent"
}

ordo_build__libtorrent() {
  rdo_build__libtorrent_configure
  rdo_build__libtorrent_compile
}

rdo_build__libtorrent_configure() {
  rdo_build__build --context-type "compile" --context-name "libtorrent" --filename "build.libtorrent.configure" "build/rtorrent"
}

rdo_build__libtorrent_compile() {
  rdo_build__build --context-type "compile" --context-name "libtorrent" --filename "build.libtorrent.compile" --build-arg "IGNORE_BUILD_ERROR=yes" "build/rtorrent"
  rdo_build__check_compile "libtorrent"
}

rdo_build__rtorrent_configure() {
  rdo_build__build --context-type "compile" --context-name "rtorrent" --filename "build.rtorrent.configure" "build/rtorrent"
}

rdo_build__rtorrent_compile() {
  rdo_build__build --context-type "compile" --context-name "rtorrent" --filename "build.rtorrent.compile" --build-arg "IGNORE_BUILD_ERROR=yes" "build/rtorrent"
  rdo_build__check_compile "rtorrent"
}

rdo_build__rtorrent_run() {
  rdo_build__build --context-type "run" --context-name "rtorrent" "run/rtorrent"
}

rdo_build__libtorrent_check() {
  rdo init verify

  local image_tag="${arg_repository}/build/libtorrent-stage:default"
  local container_name="rdo-check-libtorrent"

  if [[ "${arg_rebuild}" == "yes" ]] || [[ -z "$(rdo__running_container_id__name "${container_name}")" ]]; then
    rdo_build__init
    rdo_build__libtorrent_configure
    rdo_build__libtorrent_compile
    print_space
    rdo run init --rebuild "${image_tag}" "${container_name}"
    print_space
  fi

  docker exec "${container_name}" build-check libtorrent
}

rdo_build__rtorrent_check() {
  rdo init verify

  local image_tag="${arg_repository}/build/rtorrent-stage:default"
  local container_name="rdo-check-rtorrent"

  if [[ "${arg_rebuild}" == "yes" ]] || [[ -z "$(rdo__running_container_id__name "${container_name}")" ]]; then
    rdo_build__init
    rdo_build__libtorrent_configure
    rdo_build__libtorrent_compile
    rdo_build__rtorrent_configure
    rdo_build__rtorrent_compile
    print_space
    rdo run init --rebuild "${image_tag}" "${container_name}"
    print_space
  fi

  docker exec "${container_name}" build-check rtorrent
}

