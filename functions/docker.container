#!/usr/bin/env bash

include_header docker.container

rdo_docker_container() {
  # eval "$(args::init_subcommand "rdo docker container" "Manage docker containers.")"

  # args::new_command "clean" empty "Remove all containers" \
  #                   'rdo_docker_container_clean "${@}"'
  # args::new_command "create" default "Create a container" \
  #                   'rdo_docker_container_create "${@}"'
  # args::new_command "ls" default "List containers" \
  #                   'rdo_docker_container_ls "${@}"'
  # args::new_command "rm" default "Remove one or more containers" \
  #                   'rdo_docker_container_rm "${@}"'

  # eval "$(args::process)"

  while true; do
    case "${1}" in
      --help|-h|'')
        echo "Usage: rdo docker container COMMAND"
        echo
        echo "Manage docker containers."
        echo
        echo "Commands:"
        echo "  clean    Remove all containers"
        echo "  create   Create a container"
        echo "  ls       List containers"
        echo "  rm       Remove one or more containers"
        echo
        echo "Run 'rdo docker container COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  local args__root="rdo docker container"
  local args__cmd="${1}"
  shift || :

  case "${args__cmd}" in
    clean)
      args::verify_command_empty "${@}"
      rdo_docker_container_clean "${@}"
      ;;
    create)
      rdo_docker_container_create "${@}"
      ;;
    ls)
      rdo_docker_container_ls "${@}"
      ;;
    rm)
      rdo_docker_container_rm "${@}"
      ;;
    *)
      print_error "rdo docker container: unknown command: ${args__cmd}"
      exit 1
      ;;      
  esac
}

rdo_docker_container_clean() {
  local containers
  mapfile -t containers < <(rdo_docker_container_ls --all --quiet --no-trunc)

  if (( ${#containers[@]} > 0 )); then
    docker container rm "${containers[@]}"
  fi
}

rdo_docker_container_create() {
  docker container create --label "project=rdo" "${@}"
}

rdo_docker_container_ls() {
  docker container ls --filter "label=project=rdo" "${@}"
}
