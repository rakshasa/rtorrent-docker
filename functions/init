#!/usr/bin/env bash

include_header init

rdo_init() {
  # eval "$(args::init_subcommand "rdo init" "Initialize rtorrent docker test environment.")"

  # args::new_command "default" empty "Initialize default docker environment" \
  #                   'rdo_init_default "${@}"'
  # args::new_command "machine" empty "Initialize docker-machine environment" \
  #                   'rdo_init_machine "${@}"'
  # args::new_command "verify" empty "Verify environment" \
  #                   'rdo_init_verify "${@}"'

  # eval "$(args::process)"

  # start of generated bash args 'rdo init'

  while true; do
    case "${1}" in
      --help|-h|'')
        echo "Usage: rdo init"
        echo
        echo "Initialize rtorrent docker test environment."
        echo
        echo "Commands:"
        echo "  default   Initialize default docker environment"
        echo "  machine   Initialize docker-machine environment"
        echo "  verify    Verify environment"
        echo
        echo "Run 'rdo init COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  local args__root="rdo init"
  local args__cmd="${1}"
  shift || :

  case "${args__cmd}" in
    default)
      args::verify_command_empty "${@}"
      rdo_init_default "${@}"
      ;;
    machine)
      args::verify_command_empty "${@}"
      rdo_init_machine "${@}"
      ;;
    verify)
      args::verify_command_empty "${@}"
      rdo_init_verify "${@}"
      ;;
    *)
      print_error "rdo init: unknown command: ${args__cmd}"
      exit 1
      ;;
  esac

  # end of generated bash args 'rdo init'
}

rdo_init_default() {
  rm -f "./data/env.*" &> /dev/null || :

  rdo_init__init
  rdo_init__create_env engine

  print_progress "ready to start bash session"
}

rdo_init_machine() {
  rm -f "./data/env.*" &> /dev/null || :

  rdo_init__init
  rdo_init__create_env machine rdo
  rdo machine create --name rdo

  print_progress "ready to start bash session"
}

rdo_init_verify() {
  if [[ "${RDO_BASH_SESSION}" != "yes" ]]; then
    print_error "not in rdo bash session"
    exit 1
  fi

  case "${RDO_DOCKER_TYPE}" in
    engine)
    ;;
    machine)
      if [[ -z "${RDO_DOCKER_MACHINE}" ]]; then
        print_error "no docker machine selected"
        exit 1
      fi

      if [[ "$(rdo machine status "${RDO_DOCKER_MACHINE}")" != "Running" ]]; then
        print_error "docker machine '${RDO_DOCKER_MACHINE}' is not running"
        exit 1
      fi
    ;;
    '')
      print_error "no docker type selected, incomplete env.bash files"
      exit 1
      ;;
    *)
      print_error "unknown docker type '${RDO_DOCKER_MACHINE}'"
      exit 1
      ;;
  esac
}

# Helper functions

rdo_init__init() {
  mkdir -p "./data" "./context/run"
}

rdo_init__create_env() {
  local arg_repository="rdo"
  local project_path="$(pwd -P)"

  case "${1}" in
    machine)
      local arg_docker_type="machine"
      local arg_docker_machine="${2}"
      ;;
    engine)
      local arg_docker_type="engine"
      local arg_docker_machine=""
      ;;
    *)
      print_error "rdo_init__create_env: no valid environment type provided"
      exit 1
  esac

  cat > "./data/env.bash" <<EOF
source ~/.bash_profile || source ~/.bashrc

export PATH="${project_path}:${project_path}/misc:\${PATH}"
export EXEC_PTY="$((command -v winpty) || (command -v console) || :)"

if [[ -n "\${PROMPT_COMMAND}" ]]; then
  if type -t __git_ps1 &> /dev/null; then
    export PROMPT_COMMAND='__git_ps1 "\\\\h:" " \\[\\e[\\\$(if [[ \\\$? != 0 ]]; then echo 31m; elif [[ \\\${USER} = root ]]; then echo 32m; else echo 0m; fi)\\]\\\\W\\[\\e[0m\\]>"'
  else
    export PROMPT_COMMAND='PS1="\\\\h: \\[\\e[\$(if [[ \$? != "0" ]]; then echo 31m; elif [[ "\${USER}" = "root" ]]; then echo 32m; else echo 0m; fi)\\]\\\\W\\[\\e[0m\\]>"'
  fi
fi

export DOCKER_CONTEXT="default"

export RDO_BASH_SESSION="yes"
export RDO_DOCKER_TYPE="${arg_docker_type}"
export RDO_IPV6_ROUTING_PREFIX="fc97"
EOF

  if [[ -n "${arg_docker_machine}" ]]; then
    cat >> "./data/env.bash" <<EOF
export RDO_RUN_PATH="/rdo/run"
export RDO_DOCKER_MACHINE="${arg_docker_machine}"

export PROMPT_COMMAND="\${PROMPT_COMMAND}; PS1=\"<\\\${DOCKER_MACHINE_NAME}:\\\${DOCKER_CONTEXT}> \\\${PS1}\""
EOF
  else
    cat >> "./data/env.bash" <<EOF
export RDO_RUN_PATH="${project_path}/run"

export PROMPT_COMMAND="\${PROMPT_COMMAND}; PS1=\"<\\\${DOCKER_CONTEXT}> \\\${PS1}\""
EOF
  fi

  if [[ -n "${arg_repository}" ]]; then
    cat >> "./data/env.bash" <<EOF
export RDO_REPOSITORY="${arg_repository}"
EOF
  fi

  cat >> "./data/env.bash" <<EOF

source "${project_path}/data/env.engine"
source "${project_path}/misc/docker.bash"
source "${project_path}/misc/docker-machine.bash"
source "${project_path}/misc/rtorrent-docker.bash"
EOF
}
