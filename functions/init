#!/usr/bin/env bash

include_header init

rdo_init() {
  # eval "$(args::init_subcommand "rdo init" "Initialize rtorrent docker test environment.")"

  # args::new_command "default" empty "Initialize default docker environment" \
  #                   'rdo_init_default "${@}"'
  # args::new_command "machine" empty "Initialize docker-machine environment" \
  #                   'rdo_init_machine "${@}"'
  # args::new_command "verify" empty "Verify environment" \
  #                   'rdo_init_verify "${@}"'

  # eval "$(args::process)"

  # start of generated bash args 'rdo init'

  while true; do
    case "${1}" in
      --help|-h|'')
        echo "Usage: rdo init"
        echo
        echo "Initialize rtorrent docker test environment."
        echo
        echo "Commands:"
        echo "  default   Initialize default docker environment"
        echo "  machine   Initialize docker-machine environment"
        echo "  verify    Verify environment"
        echo
        echo "Run 'rdo init COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  local args__root="rdo init"
  local args__cmd="${1}"
  shift || :

  case "${args__cmd}" in
    default)
      args::verify_command_empty "${@}"
      rdo_init_default "${@}"
      ;;
    machine)
      args::verify_command_empty "${@}"
      rdo_init_machine "${@}"
      ;;
    verify)
      args::verify_command_empty "${@}"
      rdo_init_verify "${@}"
      ;;
    *)
      print_error "rdo init: unknown command: ${args__cmd}"
      exit 1
      ;;
  esac

  # end of generated bash args 'rdo init'
}

rdo_init_default() {
  local env_args=()

  env_args+=("--docker-engine")

  rm -f "${DATA_PATH}/env.*" &> /dev/null || :

  cat > "${DATA_PATH}/env.engine" <<EOF
export DOCKER_CONTEXT="default"
EOF

  rdo_init__init
  rdo env create "${env_args[@]}"

  print_progress "ready to start bash session"
}

rdo_init_machine() {
  local env_args=()
  local machine_args=()

  env_args+=("--docker-machine" "rdo")
  machine_args+=("--name" "rdo")

  rm -f "${DATA_PATH}/env.*" &> /dev/null || :

  cat > "${DATA_PATH}/env.engine" <<EOF
export DOCKER_CONTEXT="default"
EOF

  rdo_init__init
  rdo env create "${env_args[@]}"
  rdo machine create "${machine_args[@]}"

  print_progress "ready to start bash session"
}

rdo_init_verify() {
  if [[ "${RDO_BASH_SESSION}" != "yes" ]]; then
    print_error "not in rdo bash session"
    exit 1
  fi

  case "${RDO_DOCKER_TYPE}" in
    engine)
    ;;
    machine)
      if [[ -z "${RDO_DOCKER_MACHINE}" ]]; then
        print_error "no docker machine selected"
        exit 1
      fi

      if [[ "$(rdo machine status "${RDO_DOCKER_MACHINE}")" != "Running" ]]; then
        print_error "docker machine '${RDO_DOCKER_MACHINE}' is not running"
        exit 1
      fi
    ;;
    '')
      print_error "no docker type selected, incomplete env.bash files"
      exit 1
      ;;
    *)
      print_error "unknown docker type '${RDO_DOCKER_MACHINE}'"
      exit 1
      ;;
  esac
}

# Helper functions

rdo_init__init() {
  mkdir -p "${DATA_PATH:?Missing data path variable.}"
}
