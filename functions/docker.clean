#!/usr/bin/env bash

rdo_header docker.clean

rdo_docker_clean() {
  local cmd="${1}"; shift || :

  case "${cmd}" in
    all)
      rdo__call_empty rdo_docker_clean_all "${@}"
      ;;
    pkg)
      rdo__call_empty rdo_docker_clean_pkg "${@}"
      ;;
    --help|-h|'')
      echo "Usage: rdo docker clean COMMAND"
      echo
      echo "Docker clean commands"
      echo
      echo "Commands"
      echo "  all   Clean all build targets"
      echo
      echo "Run 'rdo docker clean COMMAND --help' for more information on a command."
      ;;
    *)
      print_error "rdo docker clean: unknown command: ${@}"
      return 1
      ;;
  esac
}

rdo_docker_clean_all() {
  rdo_docker_clean__rm_filter "label=ancestor_project=rdo-project"
}

rdo_docker_clean_pkg() {
  rdo_docker_clean__rm_filter "label=ancestor_project=rdo-pkg-cache"
}

# Helper functions

rdo_docker_clean__rm_filter() {
  local filter_args=("${@}")

  if [[ -z "${filter_args[*]}" ]]; then
    print_error "rdo_docker_clean__rm_filter: no arguments"
  fi

  local args=()

  for arg in "${filter_args[@]}"; do
    args+=("--filter" "${arg}")
  done

  local containers=($(docker ps --all --quiet "${args[@]}"))
  if (( ${#containers[@]} > 0 )); then
    docker rm --force "${containers[@]}" || :
  fi

  local images=($(docker images --all --quiet "${args[@]}"))
  if (( ${#images[@]} > 0 )); then
    (docker rmi --force "${images[@]}" 2>&1 | grep -v 'Error: No such image:' >&2) || :
  fi
}
