#!/usr/bin/env bash

include_header docker.clean

rdo_docker_clean() {
  eval "$(args::init_subcommand "rdo build" "Build project.")"

  args::new_command "all" empty "Clean all project images" \
                    'rdo_docker_clean_all'
  args::new_command "build" empty "Clean build project images" \
                    'rdo_docker_clean_build'
  args::new_command "dangling" empty "Clean dangling project images" \
                    'rdo_docker_clean_dangling'
  args::new_command "pkg-cache" empty "Clean package cache project images" \
                    'rdo_docker_clean_pkg_cache'
  args::new_command "run" empty "Clean run project images" \
                    'rdo_docker_clean_run'

  eval "$(args::process)"
}

rdo_docker_clean_all() {
  rdo_docker_clean__rm_filter "label=ancestor_project_root=rdo"
}

rdo_docker_clean_build() {
  rdo_docker_clean__rm_filter "label=ancestor_project_root=rdo" "label=ancestor_project=build"
}

rdo_docker_clean_dangling() {
  rdo_docker_clean__rm_filter "label=ancestor_project_root=rdo" "dangling=true"
}
rdo_docker_clean_pkg_cache() {
  rdo_docker_clean__rm_filter "label=ancestor_project_root=rdo" "label=ancestor_project=pkg-cache"
}

rdo_docker_clean_run() {
  rdo_docker_clean__rm_filter "label=ancestor_project_root=rdo" "label=ancestor_project=run"
}

# Helper functions

rdo_docker_clean__rm_filter() {
  local filter_args=("${@}")

  if [[ -z "${filter_args[*]}" ]]; then
    print_error "rdo_docker_clean__rm_filter: no arguments"
  fi

  local args=()

  for arg in "${filter_args[@]}"; do
    args+=("--filter" "${arg}")
  done

  local containers=($(docker ps --all --quiet "${args[@]}"))
  if (( ${#containers[@]} > 0 )); then
    docker rm --force "${containers[@]}" || :
  fi

  local images=($(docker images --all --quiet "${args[@]}"))
  if (( ${#images[@]} > 0 )); then
    (docker rmi --force "${images[@]}" 2>&1 | grep -v 'Error: No such image:' >&2) || :
  fi
}
