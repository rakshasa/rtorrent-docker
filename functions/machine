#!/usr/bin/env bash

include_header machine

rdo_machine() {
  # eval "$(args::init_subcommand "rdo machine" "Create and manage rtorrent-docker machines.")"

  # args::new_command 'create' default 'Create the docker machine' \
  #                   'rdo_machine_create "${@}"'
  # args::new_command 'destroy' default 'Destroy the docker machine' \
  #                   'rdo_machine_destroy "${@}"'
  # args::new_command 'current' default 'Print the current docker machine name' \
  #                   'rdo_machine_current "${@}"'

  # args::new_command 'start' default 'Start the docker machine' \
  #                   'rdo_machine_start "${@}"'
  # args::new_command 'stop' default 'Stop the docker machine' \
  #                   'rdo_machine_stop "${@}"'
  # args::new_command 'status' default 'Print the status of the docker machine' \
  #                   'rdo_machine_status "${@}"'

  # args::new_command 'engine' default 'Use specific docker engine' \
  #                   'rdo_machine_engine "${@}"'
  # args::new_command 'list-engines' empty 'List engines' \
  #                   'rdo_machine_list_engines'
  # args::new_command 'push-engine' default 'Push a new engine version to rdos dockerhub' \
  #                   'rdo_machine_push_engine "${@}"'

  # eval "$(args::process)"

  while true; do
    case "${1}" in
      --help|-h|'')
        echo "Usage: rdo machine"
        echo
        echo "Create and manage rtorrent-docker machines."
        echo
        echo "Commands:"
        echo "  create         Create the docker machine"
        echo "  destroy        Destroy the docker machine"
        echo "  current        Print the current docker machine name"
        echo "  start          Start the docker machine"
        echo "  stop           Stop the docker machine"
        echo "  status         Print the status of the docker machine"
        echo "  engine         Use specific docker engine"
        echo "  list-engines   List engines"
        echo "  push-engine    Push a new engine version to rdos dockerhub"
        echo
        echo "Run 'rdo machine COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  local args__root="rdo machine"
  local args__cmd="${1}"
  shift || :

  case "${args__cmd}" in
    create)
      rdo_machine_create "${@}"
      ;;
    destroy)
      rdo_machine_destroy "${@}"
      ;;
    current)
      rdo_machine_current "${@}"
      ;;
    start)
      rdo_machine_start "${@}"
      ;;
    stop)
      rdo_machine_stop "${@}"
      ;;
    status)
      rdo_machine_status "${@}"
      ;;
    engine)
      rdo_machine_engine "${@}"
      ;;
    list-engines)
      args::verify_command_empty "${@}"
      rdo_machine_list_engines
      ;;
    push-engine)
      rdo_machine_push_engine "${@}"
      ;;
    *)
      print_error "rdo machine: unknown command: ${args__cmd}"
      exit 1
      ;;
  esac

  # end of generated bash args 'rdo machine'

}

rdo_machine_create() {
  # eval "$(args::init_options_empty "rdo machine create" "Create the docker machine")"

  # args::new_option "name" string "n" "Set the docker machine name" \
  #                  'local arg_docker_machine' 'arg_docker_machine="${args__1}"'

  # eval "$(args::process)"

  # start of generated bash args 'rdo machine create'

  local arg_docker_machine
  local args__opt_value__name=

  while true; do
    case "${1}" in
      --name|-n)
        local args__1="${2:?Missing argument for '${1}'.}"
        args__opt_value__name="${args__1}"
        shift 2
        arg_docker_machine="${args__1}"
        ;;
      --help|-h)
        echo "Usage: rdo machine create"
        echo
        echo "Create the docker machine"
        echo
        echo "Options:"
        echo "  -n, --name   Set the docker machine name"
        echo
        echo "Run 'rdo machine create COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  if (( ${#} > 0 )); then
    print_error "rdo machine create: too many arguments"
    exit 1
  fi

  # end of generated bash args 'rdo machine create'
  
  print_progress "creating docker machine '${arg_docker_machine}' (cpu:${arg_cpu_count} memory:${arg_memory} disk_size:${arg_disk_size})"

  if docker-machine inspect "${arg_docker_machine}" &> /dev/null; then
    print_error "docker machine vm already exists"
    exit 1
  fi

  local engine_tag="docker-20.10.8"

  local create_args=()
  local arg_disk_size=200000

  local arg_cpu_count arg_memory
  arg_cpu_count=$(( $(rdo__cpu_count) - 2 ))
  arg_memory="$(rdo__machine_memory)"

  local ipv6_routing_prefix="fc77:0:c001"

  create_args+=(
    --driver "virtualbox"
    --engine-opt=experimental="true"
    --engine-opt=ipv6="true"
    --engine-opt=ip6tables="true"
    --engine-opt=fixed-cidr-v6="${ipv6_routing_prefix}:0::/64"
    --virtualbox-cpu-count "${arg_cpu_count}"
    --virtualbox-disk-size "${arg_disk_size}"
    --virtualbox-memory "${arg_memory}"
    # --virtualbox-boot2docker-url "https://releases.rancher.com/os/latest/rancheros.iso"
    # --virtualbox-boot2docker-url "file://C:/cygwin64/home/sunde/burmillaos.iso"
    --virtualbox-boot2docker-url "https://github.com/burmilla/os/releases/download/v2.0.0-beta4/burmillaos-v2.0.0-beta4.iso"
  )

  if [[ "${OSTYPE}" == "cygwin" ]]; then
    create_args+=(
      "--virtualbox-share-folder" "$(cd ./run && cygpath -aw .):rdo-run"
    )
  else
    create_args+=(
      "--virtualbox-share-folder" "$(cd ./run && pwd):rdo-run"
    )
  fi

  ( print_progress "calling docker-machine create '${arg_docker_machine}' -- ${create_args[*]}"

    docker-machine create "${create_args[@]}" "${arg_docker_machine}"
  )

  local RDO_DOCKER_TYPE="machine"
  local RDO_DOCKER_MACHINE="${arg_docker_machine}"

  ( print_progress "enabling virtualbox-tools"

    local commands=(
      "system-docker pull rtdo/os-vboxtools:v6.1.22-5.10.28-burmilla"
      "system-docker tag rtdo/os-vboxtools:v6.1.22-5.10.28-burmilla burmilla/os-vboxtools:v6.1.16-4.14.206-burmilla"

      "mkdir -p /rdo/run"
      "ros service enable virtualbox-tools"
      "ros service up virtualbox-tools"
    )

    rdo__sudo_host bash -c "\"$(printf "%s && " "${commands[@]}" && printf ":\n")\""
  )

  ( print_normal "waiting for virtualbox mount command to become available"

    while ! rdo__sudo_host --login command -v mount.vboxsf &> /dev/null; do
      printf '.'
      sleep 1
    done
  )

  ( print_progress "mounting /rdo/{data,run}"

    rdo__sudo_host mount.vboxsf rdo-run /rdo/run

    if rdo_machine__is_error "${arg_docker_machine}"; then
      print_error "unable to create docker machine"
      exit 1
    fi
  )

  ( print_progress "enabling docker engine version '${engine_tag}'"

    rdo_machine_engine "${engine_tag}"
  )

  ( print_progress "copying rdo utils"

    cp "./misc/rdo-iptables-flush" "./run/"
    rdo__sudo_host mv "/rdo/run/rdo-iptables-flush" "/usr/local/bin/"
  )

  ( print_progress "updating env.engine with '${arg_docker_machine}'"

    docker-machine env "${arg_docker_machine}" >> "./data/env.engine"
    
    echo "export RDO_PATH=/rdo" >> "./data/env.engine"
    echo "export RDO_DATA_PATH=/rdo/data" >> "./data/env.engine"
    echo "export RDO_RUN_PATH=/rdo/run" >> "./data/env.engine"
    echo "export RDO_IPV6_ROUTING_PREFIX=${ipv6_routing_prefix}" >> "./data/env.engine"
  )

  ( print_progress "adding default ip6tables rules"

    local commands=(
      "update-alternatives --set iptables /usr/sbin/iptables-nft"

      "ip6tables -t filter -N DOCKER-USER"
      "ip6tables -t filter -I DOCKER-USER -j RETURN"
      "ip6tables -t filter -I FORWARD -j DOCKER-USER"
    )

    rdo__sudo_host bash -c "\"$(printf "%s && " "${commands[@]}" && printf ":\n")\""
  )
}

rdo_machine_destroy() {
  local machine_name="$(rdo_machine__current)"

  print_progress "destroying docker machine '${machine_name}'"

  if [[ -z "${machine_name}" ]]; then
    print_normal "docker machine not initialized, skipping"
    return
  fi

  if [[ -n "$(docker-machine ls --quiet --filter "name=${machine_name}")" ]]; then
    print_normal "killing docker machine '${machine_name}'"
    docker-machine rm -y "${machine_name}"
  else
    print_normal "docker machine not found, skipping"
  fi
}

rdo_machine_start() {
  local machine_name="$(rdo_machine__current)"

  if [[ -z "${machine_name}" ]]; then
    print_error "could not start docker machine, machine not defined"
    return 1
  fi

  print_progress "starting docker machine '${machine_name}'"
  docker-machine start "${machine_name}"
}

rdo_machine_stop() {
  local machine_name="$(rdo_machine__current)"

  if [[ -z "${machine_name}" ]]; then
    print_warning "could not stop docker machine, machine not defined"
    return 1
  fi

  print_progress "stopping docker machine '${machine_name}'"
  docker-machine stop "${machine_name}"
}

rdo_machine_status() {
  local machine_name="${1:-$(rdo_machine__current)}"
  docker-machine status "${machine_name}"
}

rdo_machine_engine() {
  # eval "$(args::init_options_string "rdo machine engine ENGINE-TAG" "engine_tag" "Use a specific docker engine version")"
  # eval "$(args::process)"

  # start of generated bash args 'rdo machine engine ENGINE-TAG'

  while true; do
    case "${1}" in
      --help|-h)
        echo "Usage: rdo machine engine ENGINE-TAG"
        echo
        echo "Use a specific docker engine version"
        echo
        echo "Run 'rdo machine engine ENGINE-TAG COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  if (( ${#} > 1 )); then
    print_error "rdo machine engine ENGINE-TAG: too many arguments"
    exit 1
  fi

  if (( ${#} == 0 )) || [[ -z "${1}" ]]; then
    print_error "rdo machine engine ENGINE-TAG: missing or empty argument"
    exit 1
  fi

  local engine_tag="${1}"
  shift

  # end of generated bash args 'rdo machine engine ENGINE-TAG'
  
  rdo__sudo_host "cat - >> '/tmp/rtdo-docker-engine-${engine_tag}.yaml'" <<EOF
docker:
  image: rtdo/os-docker:${engine_tag}
  command: ros user-docker
  environment:
  - HTTP_PROXY
  - HTTPS_PROXY
  - NO_PROXY
  labels:
    io.rancher.os.scope: system
    io.rancher.os.after: console
  net: host
  pid: host
  ipc: host
  uts: host
  privileged: true
  restart: always
  volumes_from:
  - all-volumes
  volumes:
  - /sys:/host/sys
  - /var/lib/system-docker:/var/lib/system-docker:shared
EOF

  rdo__sudo_host "mv '/tmp/rtdo-docker-engine-${engine_tag}.yaml' '/var/lib/rancher/conf/'"
  rdo__sudo_host "ros engine enable '/var/lib/rancher/conf/rtdo-docker-engine-${engine_tag}.yaml'"
  rdo__sudo_host "ros engine switch '/var/lib/rancher/conf/rtdo-docker-engine-${engine_tag}.yaml'"
}

rdo_machine_list_engines() {
  rdo__sudo_host "ros engine list | tr -s ' ' | cut -d ' ' -f 2 | grep -v -e '^$'"
}

rdo_machine_push_engine() {
  # eval "$(args::init_options_string "rdo machine push-engine ENGINE-TAG" "engine_tag" "Push a new engine version to rdos dockerhub")"
  # eval "$(args::process)"

  # start of generated bash args 'rdo machine push engine ENGINE-TAG'

  while true; do
    case "${1}" in
      --help|-h)
        echo "Usage: rdo machine push engine ENGINE-TAG"
        echo
        echo "Push a new engine version to rdos dockerhub"
        echo
        echo "Run 'rdo machine push engine ENGINE-TAG COMMAND --help' for more information on a command."
        exit 0
        ;;
      *)
        if [[ -n "${1}" ]] && [[ -z "${1##-*}" ]]; then
          print_error "${args__root}: unknown flag: ${1}"
          return 1
        fi

        break
        ;;
    esac
  done

  if (( ${#} > 1 )); then
    print_error "rdo machine push engine ENGINE-TAG: too many arguments"
    exit 1
  fi

  if (( ${#} == 0 )) || [[ -z "${1}" ]]; then
    print_error "rdo machine push engine ENGINE-TAG: missing or empty argument"
    exit 1
  fi

  local engine_tag="${1}"
  shift

  # end of generated bash args 'rdo machine push engine ENGINE-TAG'

  if [[ -z "$(rdo__sudo_host "ros engine list | cut -d ' ' -f 2 | grep '${engine_tag}'" 2> /dev/null)" ]]; then
    print_error "docker engine already exists: ${engine_tag}"
    return 1
  fi

  local dest_prefix="./context/engine/${engine_tag}"
  rm -rf "./context/engine/docker" "${dest_prefix}"

  if ! [[ -f "${dest_prefix}.tar.gz" ]]; then
    mkdir -p "./context/engine/"

    print_progress "downloading https://download.docker.com/linux/static/stable/x86_64/${engine_tag}.tgz"
    curl -LSs "https://download.docker.com/linux/static/stable/x86_64/${engine_tag}.tgz" -o "${dest_prefix}.tar.gz"
  fi

  print_progress "extracting..."

  tar xzf "${dest_prefix}.tar.gz" -C "./context/engine/"
  mv "./context/engine/docker" "${dest_prefix}"

  print_progress "building image..."

  docker build \
    --tag "rtdo/os-docker:${engine_tag}" \
    --file <(printf "FROM scratch\nCOPY \"${engine_tag}/\" /engine/") \
    "./context/engine/"

  print_progress "pushing image..."

  docker push "rtdo/os-docker:${engine_tag}"

  print_progress "successful"
}

# Helper functions

rdo_machine__current() {
  local machine_name="$(rdo_machine__current)"
  [[ -z "${machine_name}" ]] && (print_progress "docker machine not initialized"; return 1)
  echo "${machine_name}"
}

rdo_machine__current() {
  [[ -f "${DATA_PATH}/env.engine" ]] || return
  sed -e '/DOCKER_MACHINE_NAME/!d; s/"//g; s/export DOCKER_MACHINE_NAME=//' "${DATA_PATH}/env.engine"
}

rdo_machine__status() {
  local machine_name="${1:?Missing machine name argument.}"
  docker-machine status "${machine_name}" 2> /dev/null
}

rdo_machine__is_active() {
  local machine_name="${1:?Missing machine name argument.}"
  [[ "${machine_name}" == "$(docker-machine active)" ]]
}

rdo_machine__is_created() {
  [[ -n "$(rdo_machine__status "${@}")" ]]
}

rdo_machine__is_error() {
  local machine_name="${1:?Missing machine name argument.}"
  [[ "$(docker-machine ls --format '{{ .State }}' --filter "name=${machine_name}")" == "Error" ]]
}

rdo_machine__is_running() {
  [[ "$(rdo_machine__status "${@}")" == "Running" ]]
}

rdo_machine__is_saved() {
  [[ "$(rdo_machine__status "${@}")" == "Saved" ]]
}

rdo_machine__is_stopped() {
  [[ "$(rdo_machine__status "${@}")" == "Stopped" ]]
}

rdo_machine__attempt_start() {
  local machine_name="${1:?Missing machine name argument.}"

  if rdo_machine__is_saved "${machine_name}"; then
    print_normal "starting saved docker machine"
    docker-machine start "${machine_name}"
  fi

  if rdo_machine__is_stopped "${machine_name}"; then
    print_normal "docker machine '${machine_name}' is stopped, restarting"
    docker-machine start "${machine_name}"
  fi

  if rdo_machine__is_error "${machine_name}"; then
    print_normal "removing invalid docker machine"
    docker-machine rm -f "${machine_name}"
  fi
}

rdo_machine__verify() {
  local machine_name="$(rdo_machine__current)"

  if ! docker-machine active &> /dev/null; then
    print_error "docker machine command active failed"
    exit 1
  fi

  local active_machine="$(docker-machine active)"

  if [[ "${active_machine}" != "${machine_name}" ]]; then
    print_error "docker machine mismatch, expected '${machine_name}' got '${active_machine}'"
    print_error "use './do bash' to enter custom bash session"
    exit 1
  fi
}
