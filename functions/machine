#!/usr/bin/env bash

include_header machine

rdo_machine() {
  eval "$(args::init_subcommand "rdo machine" "Create and manage rtorrent-docker machines.")"

  args::new_command "create" default "Create the docker machine" \
                    'rdo_machine_create "${@}"'
  args::new_command "current" default "Print the current docker machine name" \
                    'rdo_machine_current "${@}"'
  args::new_command "destroy" default "Destroy the docker machine" \
                    'rdo_machine_destroy "${@}"'
  args::new_command "start" default "Start the docker machine" \
                    'rdo_machine_start "${@}"'
  args::new_command "status" default "Print the status of the docker machine" \
                    'rdo_machine_status "${@}"'
  args::new_command "stop" default "Stop the docker machine" \
                    'rdo_machine_stop "${@}"'

  eval "$(args::process)"
}

rdo_machine_create() {
  local arg_disk_size=100000

  local arg_cpu_count arg_memory
  arg_cpu_count=$(( $(rdo__cpu_count) - 2 ))
  arg_memory="$(rdo__machine_memory)"

  local create_args=()

  eval "$(args::init_options_empty "rdo machine create" "Create the docker machine")"

  args::new_option "name" string "n" "Set the docker machine name" \
                   'local arg_docker_machine' 'arg_docker_machine="${args__1}"'

  eval "$(args::process)"

  print_progress "creating docker machine '${arg_docker_machine}' (cpu:${arg_cpu_count} memory:${arg_memory} disk_size:${arg_disk_size})"

  if docker-machine inspect "${arg_docker_machine}" &> /dev/null; then
    print_error "docker machine vm already exists"
    exit 1
  fi

  create_args+=(
    --driver "virtualbox"
    --virtualbox-cpu-count "${arg_cpu_count}"
    --virtualbox-disk-size "${arg_disk_size}"
    --virtualbox-memory "${arg_memory}"
    --virtualbox-boot2docker-url "https://releases.rancher.com/os/latest/rancheros.iso"
  )

  if [[ "${OSTYPE}" == "cygwin" ]]; then
    create_args+=("--virtualbox-share-folder" "$(cd ./run && cygpath -aw .):rdo-run")
  else
    create_args+=("--virtualbox-share-folder" "$(cd ./run && pwd):rdo-run")
  fi

  print_progress "creating docker machine '${arg_docker_machine}': ${create_args[*]}"

  docker-machine create "${create_args[@]}" "${arg_docker_machine}"

  print_progress "enabling virtualbox-tools"

  docker-machine ssh rdo sudo mkdir -p /rdo/run
  docker-machine ssh rdo sudo ros service enable virtualbox-tools
  docker-machine ssh rdo sudo ros service up virtualbox-tools

  print_normal "waiting for virtualbox mount command to become available"

  while ! docker-machine ssh rdo command -v mount.vboxsf &> /dev/null; do
    printf '.'
    sleep 1
  done

  print_normal "mounting /rdo/run"
  docker-machine ssh rdo sudo mount.vboxsf rdo-run /rdo/run

  if rdo_machine__is_error "${arg_docker_machine}"; then
    print_error "unable to create docker machine"
    exit 1
  fi

  print_progress "updating env.machine with '${arg_docker_machine}'"

  echo "export RDO_RUN_PATH=/rdo/run" > "./data/env.machine"
  docker-machine env "${arg_docker_machine}" >> "./data/env.machine"
}

rdo_machine_destroy() {
  local machine_name="$(rdo_machine__current)"

  print_progress "destroying docker machine '${machine_name}'"

  if [[ -z "${machine_name}" ]]; then
    print_normal "docker machine not initialized, skipping"
    return
  fi

  if [[ -n "$(docker-machine ls --quiet --filter "name=${machine_name}")" ]]; then
    print_normal "killing docker machine '${machine_name}'"
    docker-machine rm -y "${machine_name}"
  else
    print_normal "docker machine not found, skipping"
  fi

  rm "${DATA_PATH}/env.machine"
}

rdo_machine_start() {
  local machine_name="$(rdo_machine__current)"

  if [[ -z "${machine_name}" ]]; then
    print_error "could not start docker machine, machine not defined"
    return 1
  fi

  print_progress "starting docker machine '${machine_name}'"
  docker-machine start "${machine_name}"
}

rdo_machine_status() {
  local machine_name="${1:-$(rdo_machine__current)}"
  docker-machine status "${machine_name}"
}

rdo_machine_stop() {
  local machine_name="$(rdo_machine__current)"

  if [[ -z "${machine_name}" ]]; then
    print_warning "could not stop docker machine, machine not defined"
    return 1
  fi

  print_progress "stopping docker machine '${machine_name}'"
  docker-machine stop "${machine_name}"
}

# Helper functions

rdo_machine__has_env() {
  [[ -f "${DATA_PATH}/env.machine" ]] && grep 'DOCKER_MACHINE_NAME=' "${DATA_PATH}/env.machine" &> /dev/null
}

rdo_machine__current() {
  local machine_name="$(rdo_machine__current)"
  [[ -z "${machine_name}" ]] && (print_progress "docker machine not initialized"; return 1)
  echo "${machine_name}"
}

rdo_machine__current() {
  [[ -f "${DATA_PATH}/env.machine" ]] || return
  sed -e '/DOCKER_MACHINE_NAME/!d; s/"//g; s/export DOCKER_MACHINE_NAME=//' "${DATA_PATH}/env.machine"
}

rdo_machine__status() {
  local machine_name="${1:?Missing machine name argument.}"
  docker-machine status "${machine_name}" 2> /dev/null
}

rdo_machine__is_active() {
  local machine_name="${1:?Missing machine name argument.}"
  [[ "${machine_name}" == "$(docker-machine active)" ]]
}

rdo_machine__is_created() {
  [[ -n "$(rdo_machine__status "${@}")" ]]
}

rdo_machine__is_error() {
  local machine_name="${1:?Missing machine name argument.}"
  [[ "$(docker-machine ls --format '{{ .State }}' --filter "name=${machine_name}")" == "Error" ]]
}

rdo_machine__is_running() {
  [[ "$(rdo_machine__status "${@}")" == "Running" ]]
}

rdo_machine__is_saved() {
  [[ "$(rdo_machine__status "${@}")" == "Saved" ]]
}

rdo_machine__is_stopped() {
  [[ "$(rdo_machine__status "${@}")" == "Stopped" ]]
}

rdo_machine__attempt_start() {
  local machine_name="${1:?Missing machine name argument.}"

  if rdo_machine__is_saved "${machine_name}"; then
    print_normal "starting saved docker machine"
    docker-machine start "${machine_name}"
  fi

  if rdo_machine__is_stopped "${machine_name}"; then
    print_normal "docker machine '${machine_name}' is stopped, restarting"
    docker-machine start "${machine_name}"
  fi

  if rdo_machine__is_error "${machine_name}"; then
    print_normal "removing invalid docker machine"
    docker-machine rm -f "${machine_name}"
  fi
}

rdo_machine__verify() {
  local machine_name="$(rdo_machine__current)"

  if ! docker-machine active &> /dev/null; then
    print_error "docker machine command active failed"
    exit 1
  fi

  local active_machine="$(docker-machine active)"

  if [[ "${active_machine}" != "${machine_name}" ]]; then
    print_error "docker machine mismatch, expected '${machine_name}' got '${active_machine}'"
    print_error "use './do bash' to enter custom bash session"
    exit 1
  fi
}
