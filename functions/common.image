#!/usr/bin/env bash

include_header common.image

# TODO: Add lookup that only take tags or id's
rdo__image_id() {
  local image_name="${1:?Missing image argument.}"
  echo "$(rdo docker inspect --id "${image_name}" 2> /dev/null)"
}

rdo__image_id__tag() {
  local image_tag="${1:?Missing image tag argument.}"
  echo "$(rdo docker inspect --id "${image_tag}" 2> /dev/null)"
}

rdo__latest_image_id__label() {
  local label="${1:?Missing label argument.}"
  local image_id="$(docker images --all --quiet --filter label=${label} | head -n1)"

  if [[ -n "${image_id}" ]]; then
    rdo__image_id "${image_id}"
  fi
}

rdo__image_label_value__tag__label() {
  local tag="${1:?Missing tag argument.}"
  local label="${2:?Missing label argument.}"

  docker image inspect --format "{{ range \$k, \$v := .Config.Labels }}{{ if eq \$k \"${label}\" }}{{ \$v }}{{ end }}{{ end }}" "${tag}"
}

rdo__image_layer_depth() {
  local tag="${1:?Missing tag argument.}"

  docker image inspect --format "{{ len .RootFS.Layers }}" "${RDO_REPOSITORY:?Not in rdo bash session.}/${tag}"
}

rdo__image_ls__filters() {
  if [[ -z "${*}" ]]; then
    print_error "rdo__image_ls__filters: empty filter list"
    exit 1
  fi

  local args=(--no-trunc --all --quiet)

  local filter
  for filter in "${@}"; do
    args+=(--filter "${filter}")
  done

  docker image ls "${args[@]}"
}

rdo__image_rm__ids() {
  for image_id in "${@}"; do
    if [[ ! "${image_id}" =~ ^sha256:[0-9a-f]*$ ]]; then
      print_error "rdo__image_rm__ids: invalid image id: ${image_id}"
      exit 1
    fi
  done

  if (( "${#}" != 0 )); then
    docker rmi "${@}"
  fi
}

rdo__image_rm__filters() {
  rdo__image_rm__ids $(rdo__image_ls__filters "${@}")
}

rdo__image_has_file() {
  local image_tag="${1:?Missing image tag argument.}"
  local file_name="${2:?Missing file name argument.}"
  local result=1
  local image_id=
  image_id="$(docker create --rm "${image_tag}")"

  if docker cp "${image_id:?Missing image id result.}:${file_name}" "-" &> /dev/null; then
    result=0
  fi

  docker rm -f "${image_id}" > /dev/null || :
  return ${result}
}
