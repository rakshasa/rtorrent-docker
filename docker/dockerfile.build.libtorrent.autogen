# syntax=docker/dockerfile:experimental
#
# Copy the minimal build context required to create the automake build
# scripts so that unrelated changes to 'Makefile.am' files does not
# invalidate the build cache.
#
# Since running autogen invalidates most of the cached build files the
# build result of autogen is copied to a new build result image.

# TODO: Check if more of the rsync'ed files can be empty.

ARG REPOSITORY
ARG TAG_APPEND


FROM "${REPOSITORY}/build/base/compiler:${TAG_APPEND}" as build

RUN \
--mount=type=bind,source=/autogen,target=/stage/autogen \
set -xe; cd /stage/autogen; \
\
rsync -rlpgoD -muc --delete-after \
--include '/autogen.sh' \
--include '/configure.ac' \
--include '/libtorrent.pc.in' \
--include '/scripts/*.m4' \
--include '*/' \
--exclude '*' \
./ /build/; \
\
find . -name Makefile.am -exec install -Dm0644 /dev/null /build/{} \;

RUN echo -e "\033[0;32mlibtorrent autogen.sh\033[0m"; set -xe; \
\
touch /timestamp.autogen; \
./autogen.sh; \
\
find . -type d -newer /timestamp.autogen -exec mkdir -v -p /deploy/autogen/{} \; ;\
find . -not -type d -newer /timestamp.autogen -exec mv -v {} /deploy/autogen/{} \;


FROM "${REPOSITORY}/stage:global"

RUN \
--mount=type=bind,from=build,source=/deploy,target=/stage \
set -xe; \
\
cp -a /stage/autogen/ /deploy/autogen/
