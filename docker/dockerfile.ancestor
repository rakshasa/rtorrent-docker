# syntax=docker/dockerfile:experimental
#
# A common ancestor image that allows for easy deletion of all images
# created by this project.
#
# /build  - use this for any intermediate processing
# /deploy - use copy only relevant files here
# /empty  - empty file allowing docker copy of possibly missing files
# /prefix - install resulting builds here
# /stage  - initially copy docker context here

ARG BASE_IMAGE


FROM "${BASE_IMAGE}"

ENV RDO_RSYNC_ADD_ARGS="-rlpgoD -muc -t"
ENV RDO_RSYNC_UPDATE_ARGS="-rlpgoD -muc -t --delete-after"

ENV RDO_CP_A_ARGS="-a"
ENV RDO_TAR_C_ARGS="--warning=no-unknown-keyword --format pax --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime --sort=name -cf"
ENV RDO_TAR_X_ARGS="--warning=no-unknown-keyword --format pax --sort=name -xf"

WORKDIR /run/self

COPY bin/* /usr/bin/

RUN mkdir -p /build /deploy /prefix /stage

RUN \
  --mount=type=cache,id=rdo-apk-cache,sharing=locked,target=/var/cache/apk/ \
  --mount=type=cache,id=rdo-ubuntu-apt-cache,sharing=locked,target=/var/lib/apt/lists/ \
  \
  if [ -f "/etc/alpine-release" ]; then \
    apk add \
        bash \
        bind-tools \
        coreutils \
        diffutils \
        findutils \
        iproute2 \
        iptables \
        ip6tables \
        tar \
        tmux; \
  elif [ -f "/etc/debian_version" ]; then \
    apt-get update; \
    apt-get install -y \
      tmux; \
  else \
    echo "unknown distrobution"; \
    exit 1; \
  fi

ARG ANCESTOR_PROJECT

LABEL ancestor_project_root="rdo"
LABEL ancestor_project="${ANCESTOR_PROJECT}"
