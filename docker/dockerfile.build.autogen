# syntax=docker/dockerfile:experimental
#
# Copy the minimal build context required to create the automake build
# scripts so that unrelated changes to 'Makefile.am' files does not
# invalidate the build cache.
#
# Since running autogen invalidates most of the cached build files the
# build result of autogen is copied to a new build result image.

ARG REPOSITORY
ARG TAG_APPEND


FROM "${REPOSITORY}/stage:global" AS stage.libtorrent

RUN --mount=type=bind,source=/libtorrent.tar.gz,target=/stage/libtorrent.tar.gz \
\
tar ${RDO_TAR_X_ARGS} /stage/libtorrent.tar.gz \
  --directory '/deploy' \
  --wildcards '*.am' \
  --wildcards '*.m4' \
  --wildcards '*.pc.in' \
  --no-wildcards './autogen.sh' \
  --no-wildcards './configure.ac'


FROM "${REPOSITORY}/build/base/compiler:${TAG_APPEND}" AS build.libtorrent

RUN --mount=type=bind,from=stage.libtorrent,source=/deploy,target=/stage \
cp -v -a /stage/* /build/

RUN ./autogen.sh


# TODO: Add counter to stage image, check in pre-compile, auto-increment option flag.
FROM "${REPOSITORY}/stage:global"

RUN mkdir -p \
/deploy/libtorrent/source \
/deploy/libtorrent/output \
/deploy/rtorrent/source \
/deploy/rtorrent/output \
/deploy/prefix

ARG CONTEXT_TYPE

LABEL "rdo__stage__${CONTEXT_TYPE}"="yes"

# Using COPY truncates timestamps.
#
# Either never use COPY or always use it for a particular stage
# category.
#
# Only source category uses COPY as it is read-only except for the
# autogen stage.
#
# This means the source's build context must always be COPY'ed at some
# time before the build stage. Or assuming build context is where the
# timestamp truncation happens, mounting the build context should also
# work.

RUN --mount=type=bind,from=build.libtorrent,source=/build,target=/stage \
cp -v -a /stage/* /deploy/libtorrent/source/
