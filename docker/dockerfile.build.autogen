# syntax=docker/dockerfile:experimental
#
# Copy the minimal build context required to create the automake build
# scripts so that unrelated changes to 'Makefile.am' files does not
# invalidate the build cache.
#
# Since running autogen invalidates most of the cached build files the
# build result of autogen is copied to a new build result image.

# TODO: Check if more of the rsync'ed files can be empty.

ARG REPOSITORY
ARG TAG_APPEND


FROM "${REPOSITORY}/stage:global" AS stage.libtorrent

COPY /libtorrent.tar.gz /stage/

RUN set -xe; mkdir -p /deploy/libtorrent/source; \
\
tar -v --warning=no-unknown-keyword -xzf /stage/libtorrent.tar.gz \
  --wildcards '*.am' \
  --wildcards '*.m4' \
  --wildcards '*.pc.in' \
  --no-wildcards 'libtorrent/autogen.sh' \
  --no-wildcards 'libtorrent/configure.ac'; \
\
mv /stage/libtorrent /deploy/libtorrent/source

# \
# #rsync ${RDO_RSYNC_UPDATE_ARGS} \
# --include '*/' \
# --include '*.am' \
# --include '*.m4' \
# --include '*.pc.in' \
# --include '/configure.ac' \
# --include '/autogen.sh' \
# --exclude '*' \
# /stage/ /deploy/libtorrent/source/


FROM "${REPOSITORY}/build/base/compiler:${TAG_APPEND}" AS build.libtorrent

COPY --from=stage.libtorrent /deploy/libtorrent/source /build/libtorrent/source

RUN set -xe; cd /build/libtorrent/source; \
\
eval ${RDO_TIMESTAMP_UPDATE}; \
./autogen.sh


# TODO: Add counter to stage image, check in pre-compile, auto-increment option flag.
FROM "${REPOSITORY}/stage:global"

RUN mkdir -p /deploy/libtorrent/output /deploy/rtorrent/output /deploy/prefix

ARG CONTEXT_TYPE

LABEL "rdo__stage__${CONTEXT_TYPE}"="yes"

# Using COPY truncates timestamps.
#
# Either never use COPY or always use it for a particular stage
# category.
#
# Only source category uses COPY as it is read-only except for the
# autogen stage.
#
# This means the source's build context must always be COPY'ed at some
# time before the build stage. Or assuming build context is where the
# timestamp truncation happens, mounting the build context should also
# work.

COPY --from=build.libtorrent /build/libtorrent/source /deploy/libtorrent/source
# COPY --from=build.rtorrent /build/rtorrent/source /deploy/rtorrent/source

#RUN --mount=type=bind,from=build.libtorrent,source=/deploy/source,target=/stage \
#rsync ${RDO_RSYNC_ADD_ARGS} /stage/ /deploy/libtorrent/source/

#RUN --mount=type=bind,from=build.rtorrent,source=/deploy/source,target=/stage \
#rsync ${RDO_RSYNC_ADD_ARGS} /stage/ /deploy/rtorrent/source/
