# syntax=docker/dockerfile:experimental
#
# Copy the minimal build context required to create the automake build
# scripts so that unrelated changes to 'Makefile.am' files does not
# invalidate the build cache.
#
# Since running autogen invalidates most of the cached build files the
# build result of autogen is copied to a new build result image.

ARG REPOSITORY
ARG TAG_APPEND


FROM "${REPOSITORY}/stage:global" AS stage.libtorrent

COPY /libtorrent.tar.gz /stage/libtorrent.tar.gz

RUN tar ${RDO_TAR_X_ARGS} /stage/libtorrent.tar.gz \
  --directory '/deploy' \
  --wildcards '*.am' \
  --wildcards '*.m4' \
  --wildcards '*.pc.in' \
  --no-wildcards './autogen.sh' \
  --no-wildcards './configure.ac'


FROM "${REPOSITORY}/base/build/rtorrent:${TAG_APPEND}" AS build.libtorrent

COPY --from=stage.libtorrent /deploy/ /build/

RUN ./autogen.sh && eval ${RDO_TIMESTAMP_LS} "/build/"


FROM "${REPOSITORY}/stage:global" AS stage.rtorrent

COPY /rtorrent.tar.gz /stage/rtorrent.tar.gz

RUN tar ${RDO_TAR_X_ARGS} /stage/rtorrent.tar.gz \
  --directory '/deploy' \
  --wildcards '*.am' \
  --wildcards '*.m4' \
  --no-wildcards './autogen.sh' \
  --no-wildcards './configure.ac'


FROM "${REPOSITORY}/base/build/rtorrent:${TAG_APPEND}" AS build.rtorrent

COPY --from=stage.rtorrent /deploy/ /build/

RUN ./autogen.sh && eval ${RDO_TIMESTAMP_LS} "/build/"


FROM "${REPOSITORY}/stage:global"

RUN mkdir -p \
/deploy/libtorrent/source \
/deploy/libtorrent/output \
/deploy/rtorrent/source \
/deploy/rtorrent/output \
/deploy/prefix

ARG CONTEXT_TYPE
ARG REPOSITORY
ARG STAGE_TAG
ARG TAG_APPEND

LABEL "${REPOSITORY}__stage__${CONTEXT_TYPE}"="yes"
LABEL "stage__tag"="${REPOSITORY}/${STAGE_TAG}:${TAG_APPEND}"

COPY --from=build.libtorrent /build/ /deploy/libtorrent/source/
COPY --from=build.rtorrent /build/ /deploy/rtorrent/source/
